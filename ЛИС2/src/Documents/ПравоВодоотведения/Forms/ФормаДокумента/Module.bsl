
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	ВидДокументаРешение  = Перечисления.ВидыПраваПотребленияОтведенияИспользованияВоды.Решение;
	ВидДокументаЛицензия = Перечисления.ВидыПраваПотребленияОтведенияИспользованияВоды.Лицензия;
	
	УправлениеВидимостью(ЭтаФорма, Ложь);
	УстановитьОтображениеПриКонтролеПосуточногоОбъема(ЭтаФорма);
	УстановитьВидимостьРеквизитовЛицензии(ЭтаФорма);
	
	// Работа с бизнес-процессами
	Если Обработки.СозданиеНСИ.ИспользоватьМеханизмБизнесПроцессов( Объект.Ссылка ) Тогда
		БП_ПоддержкаБизнесПроцессовСервер.ОбработатьОткрытиеФормаОбъекта( ЭтотОбъект );
		ЭтотОбъект.ТолькоПросмотр = Не Обработки.СозданиеНСИ.ЭлементДоступенДляРедактирования( Объект.Ссылка );
	КонецЕсли;
	
	// 1С-КСУ Казанцев И.В. 10.04.17 15:45 Выборка отчетов по данному документу.
	ЭтаФорма.ОтчетыОВыполнении.Параметры.УстановитьЗначениеПараметра("ДокументОснование",Объект.Ссылка);
	ВестиУчетУсловийЛицензирования = ПолучитьФункциональнуюОпцию("ВестиУчетУсловийЛицензирования");
	Если ВестиУчетУсловийЛицензирования Тогда
		ЭтаФорма.Элементы.ОтчетыОВыполнении.Видимость = Истина;
	Иначе	
		ЭтаФорма.Элементы.ОтчетыОВыполнении.Видимость = Ложь;
	КонецЕсли;
	// 1С-КСУ Казанцев И.В. 10.04.17 15:45 Выборка отчетов по данному документу.Конец.
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере( Отказ, ТекущийОбъект, ПараметрыЗаписи )
	
	// Работа с бизнес-процессами
	Если Обработки.СозданиеНСИ.ИспользоватьМеханизмБизнесПроцессов( Объект.Ссылка ) Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Документ проводится автоматически при утверждении", , , , Отказ );
			Возврат;
		КонецЕсли;
		
		Обработки.СозданиеНСИ.ПроверитьЗаполнениеРеквизитов( ЭтотОбъект, Отказ );
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере( ТекущийОбъект, ПараметрыЗаписи )
	
	// Работа с бизнес-процессами
	ПослеЗаписиОбъектаБизнесПроцессаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием( Отказ, СтандартнаяОбработка )
	
	// Работа с бизнес-процессами
	Если Не ЗакрыватьБезусловно И ЗадачаИсполнителяНеЗавершенаНаСервере() Тогда 
		текОповещение = Новый ОписаниеОповещения( "ПослеЗакрытияВопросаЗакрытиеФормы", ЭтотОбъект );	
		ПоказатьВопрос( текОповещение, "Отправить на согласование документ '" + Объект.Ссылка + "'?", РежимДиалогаВопрос.ДаНет );

		Отказ				= Истина;
		ЗакрыватьБезусловно = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоквартальноПриИзменении(Элемент)
	
	УправлениеВидимостью(ЭтаФорма, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) И Объект.ДатаОкончания < ВыбранноеЗначение Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(,"Дата начала не может быть больше даты окончания. Выберите другое значение даты.");
		Возврат;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Объект.ДатаОкончания) И ЗначениеЗаполнено(Объект.ДатаНачала) И НЕ Год(ВыбранноеЗначение) = Год(Объект.ДатаОкончания) Тогда
	//	СтандартнаяОбработка = Ложь;
	//	ПоказатьПредупреждение(,"Год даты начала не может отличатся от года даты окончания. Выберите другое значение даты или очистите поле.");
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) И ЗначениеЗаполнено(Объект.ДатаОкончания) И Объект.ДатаНачала > ВыбранноеЗначение Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(,"Дата окончания не может быть меньше даты начала. Выберите другое значение даты.");
		Возврат
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Объект.ДатаОкончания) И ЗначениеЗаполнено(Объект.ДатаНачала) И НЕ Год(ВыбранноеЗначение) = Год(Объект.ДатаНачала) Тогда
	//	СтандартнаяОбработка = Ложь;
	//	ПоказатьПредупреждение(,"Год даты окончания не может отличатся от года даты начала. Выберите другое значение даты или очистите поле.");
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	УправлениеВидимостью(ЭтаФорма, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	УправлениеВидимостью(ЭтаФорма, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственнаяПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Организация"" не заполнено", , "Объект.Организация", ,);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственнаяПлощадкаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Элемент.ОтображениеПредупрежденияПриРедактировании = ?(Объект.Выпуски.Количество() = 0, ОтображениеПредупрежденияПриРедактировании.НеОтображать, ОтображениеПредупрежденияПриРедактировании.Отображать);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицФормы

&НаКлиенте
Процедура ВыпускиВыпускНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Производственная площадка"" не заполнено", , "Объект.ПроизводственнаяПлощадка", ,);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагрязняющихВеществВыпускВВодуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// {EXTCODE 25.01.2016 16:24:12 Кузнецов Д.В., Закомментировал, добавиль связи параметров выбора для реквизитов. 
	//Если ЗначениеЗаполнено(Объект.Организация) Тогда		
	//	ПараметрыФормы = Новый Структура("ПроизводственнаяПлощадка", Объект.Организация);
	//	ОткрытьФорму("Справочник.ВыпускиВВоду.ФормаВыбора", ПараметрыФормы, Элемент);
	//Иначе
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Производственная площадка"" не заполнено", , "Объект.ПроизводственнаяПлощадка", ,);
	//КонецЕсли;
	НачалоВыбораВыпусковВВоду(Элемент, СтандартнаяОбработка);
	// }EXTCODE 25.01.2016 16:24:43 Кузнецов Д.В.	
	
КонецПроцедуры

&НаКлиенте
Процедура КонцентрацияЗВВМестеСбросаСточныхВодВыпускВВодуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораВыпусковВВоду(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // Процедура КонцентрацияЗВВМестеСбросаСточныхВодВыпускВВодуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

&НаКлиенте
Процедура ВыпускиПриИзменении(Элемент)
	
	Если Объект.Поквартально Тогда
		ПересчетГодаДопустимогоОбъема();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(Форма, Флаг)
	
	ЭлементыФормы = Форма.Элементы;
	ВидимостьКварталов = Форма.Объект.Поквартально;
	ЭлементыФормы.ВыпускиОбъемДопустимогоСброса.Доступность = НЕ ВидимостьКварталов;
	
	Если ВидимостьКварталов Тогда
		Если ЗначениеЗаполнено(Форма.Объект.ДатаНачала) И ЗначениеЗаполнено(Форма.Объект.ДатаОкончания) Тогда
			КварталДатыНачала = Число(Формат(Форма.Объект.ДатаНачала, "ДФ=к"));
			КварталДатыОкончания = ?( Год( Форма.Объект.ДатаОкончания ) > Год( Форма.Объект.ДатаНачала ),
									  4, Число(Формат(Форма.Объект.ДатаОкончания, "ДФ=к")) );
									  
			КоличествоЛет = Год(Форма.Объект.ДатаОкончания) - Год( Форма.Объект.ДатаНачала);
								
			ЭлементыФормы.ВыпускиОбъемДопустимогоСброса1квартал.Видимость = ?((КварталДатыНачала = 1) ИЛИ  КоличествоЛет > 0, Истина, Ложь);
			ЭлементыФормы.ВыпускиОбъемДопустимогоСброса1КварталВисокосныйГод.Видимость = ?(((КварталДатыНачала = 1) ИЛИ КоличествоЛет > 0) И Форма.Объект.Посуточно, Истина, Ложь);
			ЭлементыФормы.ВыпускиОбъемДопустимогоСброса2квартал.Видимость = ?((КварталДатыНачала < 3 И КварталДатыОкончания > 1) ИЛИ  КоличествоЛет > 0 И Месяц(Форма.Объект.ДатаОкончания) > 3 ИЛИ КоличествоЛет > 1, Истина, Ложь); 	
			ЭлементыФормы.ВыпускиОбъемДопустимогоСброса3квартал.Видимость = ?((КварталДатыНачала < 4 И КварталДатыОкончания > 2) ИЛИ  КоличествоЛет > 0 И Месяц(Форма.Объект.ДатаОкончания) > 6 ИЛИ КоличествоЛет > 1, Истина, Ложь);
			ЭлементыФормы.ВыпускиОбъемДопустимогоСброса4квартал.Видимость = (КварталДатыОкончания = 4);
			
			Квартал1 = ?(ЭлементыФормы.ВыпускиОбъемДопустимогоСброса1квартал.Видимость, 1, 0);
			Квартал2 = ?(ЭлементыФормы.ВыпускиОбъемДопустимогоСброса2квартал.Видимость, 1, 0);
			Квартал3 = ?(ЭлементыФормы.ВыпускиОбъемДопустимогоСброса3квартал.Видимость, 1, 0);
			Квартал4 = ?(ЭлементыФормы.ВыпускиОбъемДопустимогоСброса4квартал.Видимость, 1, 0);
			
			КоличествоКварталов = Квартал1 + Квартал2 + Квартал3 + Квартал4;
			
			Для каждого Строка Из Форма.Объект.Выпуски Цикл
				
				Если (Строка.ОбъемДопустимогоСброса > 0 И НЕ ЗначениеЗаполнено(Строка.ОбъемДопустимогоСброса1квартал) И НЕ ЗначениеЗаполнено(Строка.ОбъемДопустимогоСброса2квартал)
					И НЕ ЗначениеЗаполнено(Строка.ОбъемДопустимогоСброса3квартал) И НЕ ЗначениеЗаполнено(Строка.ОбъемДопустимогоСброса4квартал)) ИЛИ Флаг = Истина Тогда
					
					ОбъемСброса = Строка.ОбъемДопустимогоСброса / КоличествоКварталов;
					
					Строка.ОбъемДопустимогоСброса1квартал = ?(Квартал1 = 1, ОбъемСброса, 0);
					
					Если Форма.Объект.Посуточно Тогда
						
						Строка.ОбъемДопустимогоСброса1КварталВисокосныйГод = ?(Квартал1 = 1, (ОбъемСброса / 90) * 91, 0);
						
					КонецЕсли;
					
					Строка.ОбъемДопустимогоСброса2квартал = ?(Квартал2 = 1, ОбъемСброса, 0);
					Строка.ОбъемДопустимогоСброса3квартал = ?(Квартал3 = 1, ОбъемСброса, 0);
					Строка.ОбъемДопустимогоСброса4квартал = ?(Квартал4 = 1, ОбъемСброса, 0);
					
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.ВыпускиОбъемДопустимогоСброса1квартал.Видимость = Ложь;
		ЭлементыФормы.ВыпускиОбъемДопустимогоСброса1КварталВисокосныйГод.Видимость = Ложь;
		ЭлементыФормы.ВыпускиОбъемДопустимогоСброса2квартал.Видимость = Ложь;
		ЭлементыФормы.ВыпускиОбъемДопустимогоСброса3квартал.Видимость = Ложь;
		ЭлементыФормы.ВыпускиОбъемДопустимогоСброса4квартал.Видимость = Ложь;
	КонецЕсли;
		
	ЭлементыФормы.Выпуски.Доступность = (ЗначениеЗаполнено(Форма.Объект.ДатаНачала) И ЗначениеЗаполнено(Форма.Объект.ДатаОкончания));
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетГодаДопустимогоОбъема()
	
	ТекущаяСтрока = Элементы.Выпуски.ДанныеСтроки(Элементы.Выпуски.ТекущаяСтрока);
	Если Не ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока.ОбъемДопустимогоСброса = ?(Элементы.ВыпускиОбъемДопустимогоСброса1квартал.Видимость, ТекущаяСтрока.ОбъемДопустимогоСброса1Квартал, 0)
			+ ?(Элементы.ВыпускиОбъемДопустимогоСброса2квартал.Видимость, ТекущаяСтрока.ОбъемДопустимогоСброса2Квартал, 0)
			+ ?(Элементы.ВыпускиОбъемДопустимогоСброса3квартал.Видимость, ТекущаяСтрока.ОбъемДопустимогоСброса3Квартал, 0)
			+ ?(Элементы.ВыпускиОбъемДопустимогоСброса4квартал.Видимость, ТекущаяСтрока.ОбъемДопустимогоСброса4Квартал, 0);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораВыпусковВВоду(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиКД = Новый НастройкиКомпоновкиДанных;
	
	Отбор = НастройкиКД.Отбор.Элементы;
	
	СписокВыпусков = Новый СписокЗначений;
	
	Для Каждого СтрокаТЧ Из Объект.Выпуски Цикл 
		
		СписокВыпусков.Добавить(СтрокаТЧ.Выпуск);
		
	КонецЦикла; // Для Каждого СтрокаТЧ Из Объект.ТаблицаЗагрязняющихВеществ Цикл	
	
	ЭлОтбораВыпускиВВоду = Отбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлОтбораВыпускиВВоду.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлОтбораВыпускиВВоду.ВидСравнения  	  = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлОтбораВыпускиВВоду.ПравоеЗначение	  = СписокВыпусков;
	ЭлОтбораВыпускиВВоду.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлОтбораВыпускиВВоду.ИдентификаторПользовательскойНастройки = "Ссылка";
	
	ПараметрыОткрытия = Новый Структура("ФиксированныеНастройки, КлючНазначенияИспользования", НастройкиКД, "ОткрытьФормуСФиксированнымиНастройками");
	
	ОткрытьФорму("Справочник.ВыпускиВВоду.ФормаВыбора", ПараметрыОткрытия, Элемент, Новый УникальныйИдентификатор);
	
КонецПроцедуры // Процедура НачалоВыбораВыпусковВВоду(Элемент, СтандартнаяОбработка)

&НаКлиенте
Процедура ВыпускиКатегорияКачестваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Выпуски.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда 
		
		ОткрытьФормуВыбораКачестваВод(ТекДанные.Выпуск, Элемент);
		
	КонецЕсли; // Если ТекДанные <> Неопределено Тогда
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораКачестваВод(Выпуск, ВладелецФормыВыбора)
			
	// 1. Определение категорий качества вод выпуска.
	СписокКачестваВодПоВыпуску = ПолучитьКатегорииКачестваВодВыпуска(Выпуск);
	
	// 2. Установка отбора в форме выбора.
	ОбщегоНазначенияКлиентСерверУООС.ОткрытьФормуВыбораКачестваВод(Выпуск, ВладелецФормыВыбора, СписокКачестваВодПоВыпуску);
	
КонецПроцедуры // Процедура КатегорияКачестваВодыНачалоВыбораНаСервере(Выпуск, Элемент)

&НаСервереБезКонтекста
Функция ПолучитьКатегорииКачестваВодВыпуска(Выпуск)
	
	Возврат ОбщегоНазначенияКлиентСерверУООС.ПолучитьКатегорииКачестваВодВыпуска(Выпуск);
		
КонецФункции // Функция ПолучитьКатегорииКачестваВодВыпуска(Выпуск)

&НаКлиенте
Процедура ВыпускиКатегорияКачестваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// 1. Определение категорий качества вод выпуска.
	ТекДанные = Элементы.Выпуски.ТекущиеДанные;
	
	СписокКачестваВодПоВыпуску = ПолучитьКатегорииКачестваВодВыпуска(ТекДанные.Выпуск);

	Если СписокКачестваВодПоВыпуску.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда 
		СтандартнаяОбработка = Ложь;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбранная категория качества воды не соответствует выпуску.",,"Объект.Выпуски[%1].КатегорияКачества");
		
	КонецЕсли; // Если СписокКачестваВодПоВыпуску.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	УстановитьВидимостьРеквизитовЛицензии(ЭтаФорма);
	
	Если Объект.ВидДокумента = ВидДокументаЛицензия Тогда
		ЗаполнитьРегистрационныйНомерДляЛицензии();
	КонецЕсли; // Если Объект.ВидДокумента = ВидДокументаЛицензия Тогда
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегистрационныйНомерДляЛицензии()
	
	Объект.РегистрационныйНомер = "" + Объект.СерияЛицензии + " " + Объект.НомерЛицензии + " " + Объект.ЛицензияВид;
	
КонецПроцедуры

&НаКлиенте
Процедура СерияЛицензииПриИзменении(Элемент)
	ЗаполнитьРегистрационныйНомерДляЛицензии();
КонецПроцедуры

&НаКлиенте
Процедура НомерЛицензииПриИзменении(Элемент)
	ЗаполнитьРегистрационныйНомерДляЛицензии();
КонецПроцедуры

&НаКлиенте
Процедура ЛицензияВидПриИзменении(Элемент)
	ЗаполнитьРегистрационныйНомерДляЛицензии();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьРеквизитовЛицензии(Форма)
	
	ЭлементыФормы	 = Форма.Элементы;
	Объект			 = Форма.Объект;
	
	ЭлементыФормы.СерияЛицензии.Видимость				 = (Объект.ВидДокумента = Форма.ВидДокументаЛицензия);
	ЭлементыФормы.ЛицензияВид.Видимость					 = (Объект.ВидДокумента = Форма.ВидДокументаЛицензия);
	ЭлементыФормы.НомерЛицензии.Видимость				 = (Объект.ВидДокумента = Форма.ВидДокументаЛицензия);
	ЭлементыФормы.РегистрационныйНомер.ТолькоПросмотр	 = (Объект.ВидДокумента = Форма.ВидДокументаЛицензия);
	
КонецПроцедуры

#КонецОбласти

// Работа с бизнес-процессами
#Область ФункцииБизнесПроцессов

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗакрытиеФормы( Результат, ДополнительныеПараметры ) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		текКомандаВыполнения = ПолучитьКомандуВыполнения();
		Если текКомандаВыполнения <> Неопределено Тогда 
			ВыполнитьЗадачу( текКомандаВыполнения );
		КонецЕсли;
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу( Команда ) Экспорт
	
	Если ПроверитьЗаполнениеДанныхНаСервере() Тогда 
		стрКомментарий = "";
		
		текОповещение  = Новый ОписаниеОповещения( "ПослеВводаКомментария", ЭтотОбъект );	
		
		ПоказатьВводСтроки( текОповещение, стрКомментарий, "Введите комментарий выполненой задачи" );
		
		ЗавершитьЗадачуНаСервере( Команда.Имя );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКомментария( фпКомментарий, фпПараметры ) Экспорт
	
	Если Не ПустаяСтрока( фпКомментарий ) Тогда
		УстановитьКомментарийЗадачиНаСервере( ЭтотОбъект.БП_ВыполняемаяЗадача, фпКомментарий );	
	КонецЕсли;
	
	Если Открыта() Тогда 
		Закрыть();
	КонецЕсли;
	
	Оповестить( "БП_ВыполнениеЗадачи", Объект.Ссылка );
	
КонецПроцедуры

&НаКлиенте
Процедура БП_ВыполнитьЗадачу( Команда )
	
	БП_ПоддержкаБизнесПроцессовКлиент.ВыполнитьЗадачу( ЭтотОбъект, Команда );
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКомандуВыполнения()
	
	Для Каждого текКоманда Из Команды Цикл 	
		Если текКоманда.Действие = "БП_ВыполнитьЗадачу" Тогда 
			Возврат текКоманда;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ЗадачаИсполнителяНеЗавершенаНаСервере()
	
	Возврат ( Элементы.Найти( "БП_ВыполняемаяЗадача" ) <> Неопределено И
		 	  Не ЭтотОбъект.БП_ВыполняемаяЗадача.Выполнена И
		 	  ЭтотОбъект.БП_ВыполняемаяЗадача.ТочкаМаршрута.Порядок = 1 );
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеДанныхНаСервере()

	Возврат ИСТИНА; //РеквизитФормыВЗначение( "Объект" ).ПроверитьЗаполнениеДанных();

КонецФункции

&НаСервере
Процедура УстановитьРеквизитыПоБизнесПроцессуНаСервере()

	Обработки.СозданиеНСИ.УстановитьРеквизитОрганизация( ЭтотОбъект.БП_ВыполняемаяЗадача.БизнесПроцесс, Объект.Организация );
	
	Обработки.СозданиеНСИ.УстановитьСрокВыполненияПоследнейЗадачиБизнесПроцесса( ЭтотОбъект.БП_ВыполняемаяЗадача.БизнесПроцесс );
								
	Обработки.СозданиеНСИ.УстановитьРеквизитПользователь( ЭтотОбъект.БП_ВыполняемаяЗадача, ПараметрыСеанса.ТекущийПользователь );
	
	Обработки.СозданиеНСИ.УстановитьРеквизитПредставлениеОбъекта( ЭтотОбъект.БП_ВыполняемаяЗадача.БизнесПроцесс, Объект );
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьБизнесПроцессСогласованияНаСервере()
	
	Обработки.СозданиеНСИ.ЗапуститьБизнесПроцессСогласования( Объект.Ссылка );
	
	БП_ПоддержкаБизнесПроцессовСервер.ОбработатьОткрытиеФормаОбъекта( ЭтотОбъект );
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиОбъектаБизнесПроцессаНаСервере()
	
	Если Обработки.СозданиеНСИ.ИспользоватьМеханизмБизнесПроцессов( Объект.Ссылка ) Тогда
		ЗапуститьБизнесПроцессСогласованияНаСервере();
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗавершитьЗадачуНаСервере( фпИмяКоманды )

	текНомер  = Сред( фпИмяКоманды, 12 );
	текСтатус = ЭтаФорма["БП_Статус" + текНомер];
	
	НачатьТранзакцию();
	
	БП_ПоддержкаБизнесПроцессовСервер.ЗавершитьЗадачу( ЭтотОбъект.БП_ВыполняемаяЗадача, ЭтотОбъект.БП_ВыполняемаяЗадача.БизнесПроцесс, текСтатус );

	Если ЭтотОбъект.БП_ВыполняемаяЗадача.БизнесПроцесс.Завершен Тогда 
		Попытка
			РеквизитФормыВЗначение( "Объект" ).Записать( РежимЗаписиДокумента.Проведение );
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ОписаниеОшибки() );
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Обработки.СозданиеНСИ.УстановитьРеквизитыПоБизнесПроцессу( ЭтотОбъект.БП_ВыполняемаяЗадача, Объект.Ссылка );
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура УстановитьКомментарийЗадачиНаСервере( фпЗадача, фпКомментарий )
	
	Обработки.СозданиеНСИ.УстановитьРеквизитКомментарий( фпЗадача, фпКомментарий );
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагрязняющихВеществНаименованиеЗагрязняющегоВеществаПриИзменении(Элемент)
	
	ТекСтрока	 = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	ЗВТекСтроки	 = ТекСтрока.ЗагрязняющееВещество;
	
	Если ТипЗнч(ЗВТекСтроки) = Тип("СправочникСсылка.ЗВВода") Тогда
	
		ТекСтрока.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ОКЕИ.МиллиграммНаКубическийДециметр");
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПосуточноПриИзменении(Элемент)
	
	УстановитьОтображениеПриКонтролеПосуточногоОбъема(ЭтаФорма);
	
	ОчиститьОбъемыГодовыхИКвартальныхНормативов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеПриКонтролеПосуточногоОбъема(Форма)
	
	ЭлементыФормы = Форма.Элементы;
	ВидимостьКварталов = Форма.Объект.Поквартально;
	ВидимостьПосуточно = Форма.Объект.Посуточно;
	
	ЭлементыФормы.ВыпускиОбъемДопустимогоСброса.Доступность = НЕ ВидимостьКварталов;
	
	Если ВидимостьПосуточно Тогда
		
		Если ЗначениеЗаполнено(Форма.Объект.ДатаНачала) И ЗначениеЗаполнено(Форма.Объект.ДатаОкончания) Тогда
			
			КварталДатыНачала = Число(Формат(Форма.Объект.ДатаНачала, "ДФ=к"));
			КварталДатыОкончания = ?( Год( Форма.Объект.ДатаОкончания ) > Год( Форма.Объект.ДатаНачала ),
									 4, Число(Формат(Форма.Объект.ДатаОкончания, "ДФ=к")) );
				
			КоличествоЛет = Год(Форма.Объект.ДатаОкончания) - Год( Форма.Объект.ДатаНачала);
			
			КоличествоДней = (КонецГода(Форма.Объект.ДатаОкончания) - НачалоГода(Форма.Объект.ДатаНачала)) / ( 60 * 60 * 24);
			
			ПризнакВисокосногоГода = ?((КоличествоДней / (КоличествоЛет + 1)) > 365, Истина, Ложь);
				
			Если ПризнакВисокосногоГода Тогда
				
				Если ВидимостьКварталов Тогда
					
					ЭлементыФормы.ВыпускиОбъемДопустимогоСброса1КварталВисокосныйГод.Видимость = Истина;
					
				Иначе
					
					ЭлементыФормы.ВыпускиОбъемДопустимогоСброса1КварталВисокосныйГод.Видимость = Ложь;
					
				КонецЕсли;
				
				ЭлементыФормы.ВыпускиОбъемДопустимогоСбросаПосуточно.Видимость							 = Истина;
				ЭлементыФормы.ВыпускиОбъемДопустимогоСбросаВисокосныйГод.Видимость				 = Истина;
				
			КонецЕсли;
			
		Иначе
			
			ЭлементыФормы.ВыпускиОбъемДопустимогоСбросаПосуточно.Видимость					 = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ЭлементыФормы.ВыпускиОбъемДопустимогоСброса1КварталВисокосныйГод.Видимость = Ложь;
		ЭлементыФормы.ВыпускиОбъемДопустимогоСбросаПосуточно.Видимость					 = Ложь;
		ЭлементыФормы.ВыпускиОбъемДопустимогоСбросаВисокосныйГод.Видимость		 = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОбъемыГодовыхИКвартальныхНормативов()
	
	Для каждого СтрокаТЧ Из Объект.Выпуски Цикл
		
		СтрокаТЧ.ОбъемДопустимогоСброса1Квартал = 0;
		СтрокаТЧ.ОбъемДопустимогоСброса1КварталВисокосныйГод = 0;
		СтрокаТЧ.ОбъемДопустимогоСброса2Квартал = 0;
		СтрокаТЧ.ОбъемДопустимогоСброса3Квартал = 0;
		СтрокаТЧ.ОбъемДопустимогоСброса4Квартал = 0;
		СтрокаТЧ.ОбъемДопустимогоСброса = 0;
		СтрокаТЧ.ОбъемДопустимогоСбросаВисокосныйГод = 0;
		СтрокаТЧ.ОбъемДопустимогоСбросаПосуточно = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиОбъемДопустимогоСбросаПосуточноПриИзменении(Элемент)
	
	ТекДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	Если Объект.Поквартально Тогда
		
		ТекДанные.ОбъемДопустимогоСброса1Квартал				 = ТекДанные.ОбъемДопустимогоСбросаПосуточно * 90;
		ТекДанные.ОбъемДопустимогоСброса1КварталВисокосныйГод	 = ТекДанные.ОбъемДопустимогоСбросаПосуточно * 91;
		ТекДанные.ОбъемДопустимогоСброса2Квартал				 = ТекДанные.ОбъемДопустимогоСбросаПосуточно * 91;
		ТекДанные.ОбъемДопустимогоСброса3Квартал				 = ТекДанные.ОбъемДопустимогоСбросаПосуточно * 92;
		ТекДанные.ОбъемДопустимогоСброса4Квартал				 = ТекДанные.ОбъемДопустимогоСбросаПосуточно * 92;
		
		ТекДанные.ОбъемДопустимогоСброса							 = ТекДанные.ОбъемДопустимогоСбросаПосуточно * 365;
		ТекДанные.ОбъемДопустимогоСбросаВисокосныйГод			 = ТекДанные.ОбъемДопустимогоСбросаПосуточно * 366;
		
	Иначе
		
		ТекДанные.ОбъемДопустимогоСброса1Квартал				 = 0;
		ТекДанные.ОбъемДопустимогоСброса1КварталВисокосныйГод	 = 0;
		ТекДанные.ОбъемДопустимогоСброса2Квартал				 = 0;
		ТекДанные.ОбъемДопустимогоСброса3Квартал				 = 0;
		ТекДанные.ОбъемДопустимогоСброса4Квартал				 = 0;
		
		ТекДанные.ОбъемДопустимогоСброса							 = ТекДанные.ОбъемДопустимогоСбросаПосуточно * 365;
		ТекДанные.ОбъемДопустимогоСбросаВисокосныйГод			 = ТекДанные.ОбъемДопустимогоСбросаПосуточно * 366;
		
	КонецЕсли;
	
КонецПроцедуры

// 1С-КСУ Казанцев И.В. 12.04.17 При изменении текста условия проверять наличие отчетов по этому условию, предупреждать.
Функция ПроверитьНаличиеОтчетовПоУсловию(ГУИДУсловия)
	// надо найти отчеты по данному документу с указанием этого условия
	Результат = Новый Структура();
	Результат.Вставить("КоличествоОтчетов",0);
	
	ТекДокументСсылка = Объект.Ссылка;
	Если ЗначениеЗаполнено(ТекДокументСсылка) Тогда
		ЗапросКоличестваОтчетов = Новый Запрос;
		ЗапросКоличестваОтчетов.Текст = "ВЫБРАТЬ
		                            |	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтчетОВыполненииУсловийЛицензированияВыполнениеУсловий.Ссылка), 0) КАК КоличествоОтчетов
		                            |ИЗ
		                            |	Документ.ОтчетОВыполненииУсловийЛицензирования.ВыполнениеУсловий КАК ОтчетОВыполненииУсловийЛицензированияВыполнениеУсловий
		                            |ГДЕ
		                            |	ОтчетОВыполненииУсловийЛицензированияВыполнениеУсловий.Ссылка.ДокументОснование = &ДокументОснование
		                            |	И ОтчетОВыполненииУсловийЛицензированияВыполнениеУсловий.ГУИДУсловия = &ГУИДУсловия";
		ЗапросКоличестваОтчетов.УстановитьПараметр("ДокументОснование",ТекДокументСсылка);							
		ЗапросКоличестваОтчетов.УстановитьПараметр("ГУИДУсловия",ГУИДУсловия);	
		тзКоличествоОтчетов = ЗапросКоличестваОтчетов.Выполнить().Выгрузить();
		Если тзКоличествоОтчетов.Количество() > 0 Тогда
			Результат.КоличествоОтчетов = тзКоличествоОтчетов[0].КоличествоОтчетов;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЛицензионныеУсловияПередНачаломИзменения(Элемент, Отказ)
	ТекДанныеУсловия = ЭтаФорма.Элементы.ЛицензионныеУсловия.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанныеУсловия.ГУИДУсловия) Тогда
		РезультатПроверки = ПроверитьНаличиеОтчетовПоУсловию(ТекДанныеУсловия.ГУИДУсловия);
		Если РезультатПроверки.КоличествоОтчетов > 0 Тогда
			 // надо спросить подтверждения на измение текста условия
			ПоказатьПредупреждение(,НСтр("ru= 'По данному условию уже есть оформленные отчеты о выполнении. Изменение текста условия не рекомендуется'"));
		 КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЛицензионныеУсловияПередУдалением(Элемент, Отказ)
	ТекДанныеУсловия = ЭтаФорма.Элементы.ЛицензионныеУсловия.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанныеУсловия.ГУИДУсловия) Тогда
		РезультатПроверки = ПроверитьНаличиеОтчетовПоУсловию(ТекДанныеУсловия.ГУИДУсловия);
		Если РезультатПроверки.КоличествоОтчетов > 0 Тогда
			// надо спросить подтверждения на измение текста условия
			ПараметрыКоманды = Новый Структура;
			ПараметрыКоманды.Вставить("ГУИДУсловия",ТекДанныеУсловия.ГУИДУсловия);
			Оповещение = Новый ОписаниеОповещения("ПодтверждениеУдаленияЗавершение", ЭтотОбъект, ПараметрыКоманды);
			ТекстВопроса =  НСтр("ru= 'По данному условию уже есть оформленные отчеты о выполнении. Удалить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Удаление условия'"));
			//ПоказатьВопрос(НСтр("ru= 'По данному условию уже есть оформленные отчеты о выполнении. Удалить?'"),Режим,0,,НСтр("ru= 'Внимание.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьУдалениеУсловия(ГУИДУсловия)
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	КоличествоСтрок = ТекОбъект.ЛицензионныеУсловия.Количество();
	Для ИндексСтроки = 1 по КоличествоСтрок Цикл
		Если ТекОбъект.ЛицензионныеУсловия[КоличествоСтрок - ИндексСтроки].ГУИДУсловия = ГУИДУсловия Тогда
			ТекОбъект.ЛицензионныеУсловия.Удалить(КоличествоСтрок - ИндексСтроки);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТекОбъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеУдаленияЗавершение(Знач Результат, Знач ПараметрыКоманды) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьУдалениеУсловия(ПараметрыКоманды.ГУИДУсловия);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтчетыОВыполненииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Параметр = Новый Структура("Ключ",ЭтаФОрма.Элементы.ОтчетыОВыполнении.ТекущиеДанные.Ссылка);
    ОткрытьФорму("Документ.ОтчетОВыполненииУсловийЛицензирования.Форма.ФормаДокумента",Параметр);
КонецПроцедуры
// 1С-КСУ Казанцев И.В. 12.04.17 При изменении текста условия проверять наличие отчетов по этому условию, предупреждать. Конец.

#КонецОбласти

