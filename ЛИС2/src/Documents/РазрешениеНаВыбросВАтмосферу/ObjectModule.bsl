#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Ошибки = Неопределено;
	
	Если НЕ ПереченьКоличествоЗВРазрешенныхКВыбросуИЗА.Количество() = 0 Тогда
		ПроверкаСоответствияНормативовВкладок(Отказ, Ошибки)
	КонецЕсли;
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат;
	КонецЕсли;
	
	КоличествоЛет = Год(КонецДействияРазрешения)-Год(НачалоДействияРазрешения)+1;
	Движения.ДопустимыеОбъемыВыбросовЗагрязняющихВеществВАтмосферу.Записывать = Истина;	
	
	РазрешениеПоИЗА = ?(ПереченьКоличествоЗВРазрешенныхКВыбросуИЗА.Количество() = 0, 0, 1);
	Если РазрешениеПоИЗА Тогда		
		ТаблицаВыброса = ПереченьКоличествоЗВРазрешенныхКВыбросуИЗА;
	Иначе
		ТаблицаВыброса = ТаблицаЗВ;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТаблицаВыброса Цикл 		
		
		Для НомерГода = 1 По КоличествоЛет Цикл
			
			Если ПериодичностьРазрешения = Перечисления.ПериодичностьРазрешительнойДокументации.ПоГодам Тогда
				
				Если НЕ ТекущаяСтрока["РазрешенныйВыбросГод" + Строка(НомерГода)] = 0 ИЛИ НЕ ТекущаяСтрока["ВСВГод" + Строка(НомерГода)] = 0 ИЛИ НЕ ТекущаяСтрока["МощностьВыбросаГод" + Строка(НомерГода)] = 0 Тогда
															
					Движение = Движения.ДопустимыеОбъемыВыбросовЗагрязняющихВеществВАтмосферу.Добавить();
			    	ЗаполнитьЗначенияСвойств(Движение, ЭтотОбъект, "Организация, ПроизводственнаяПлощадка");
					ЗаполнитьЗначенияСвойств(Движение, ТекущаяСтрока);
					
					ДатаНачала = ДобавитьМесяц(НачалоДействияРазрешения, (НомерГода-1)*12);
					
					Если НЕ НомерГода = 1 Тогда
						
						ДатаНачала = НачалоГода(ДатаНачала);
						
					КонецЕсли;
					
					ДатаОкончания = ?(НомерГода = КоличествоЛет, КонецДня(КонецДействияРазрешения), КонецГода(ДатаНачала));
				
					СтруктураЗаполнения = Новый Структура("Период, ДатаОкончанияДействияНорматива, ПДВ, ВСВ, ПДВМощность, ВСВМощность",
						ДатаНачала, ДатаОкончания, ТекущаяСтрока["РазрешенныйВыбросГод" + Строка(НомерГода)], 
						ТекущаяСтрока["ВСВГод" + Строка(НомерГода)], ТекущаяСтрока["МощностьВыбросаГод" + Строка(НомерГода)],
						ТекущаяСтрока["МощностьВыбросаВСВГод" + Строка(НомерГода)]);
						
					Если РазрешениеПоИЗА Тогда
							
						ТекущийИЗА = ИсточникиЗагрязнения.Найти(ТекущаяСтрока.ИдентификаторИЗА, "ИдентификаторСтроки").ИсточникЗагрязнения;
						СтруктураЗаполнения.Вставить("ИсточникЗагрязнения", ТекущийИЗА);						
						
					КонецЕсли;
						
					ЗаполнитьЗначенияСвойств(Движение, СтруктураЗаполнения);
					
				КонецЕсли;
				
			ИначеЕсли ПериодичностьРазрешения = Перечисления.ПериодичностьРазрешительнойДокументации.Поквартально Тогда
				
				Для НомерКвартала = 1 По 4 Цикл
					
					Если НЕ ТекущаяСтрока["РазрешенныйВыбросГод" + Строка(НомерГода) + "Квартал" + Строка(НомерКвартала)] = 0 ИЛИ НЕ ТекущаяСтрока["ВСВГод" + Строка(НомерГода) + "Квартал" + Строка(НомерКвартала)] = 0 Тогда
						
						Движение = Движения.ДопустимыеОбъемыВыбросовЗагрязняющихВеществВАтмосферу.Добавить();
				    	ЗаполнитьЗначенияСвойств(Движение, ЭтотОбъект, "Организация, ПроизводственнаяПлощадка");
						ЗаполнитьЗначенияСвойств(Движение, ТекущаяСтрока);
						
						ДатаНачала = ДобавитьМесяц(НачалоДействияРазрешения, ((НомерГода-1)*4+НомерКвартала-Число(Формат(НачалоДействияРазрешения, "ДФ=к")))*3);
						
						Если НЕ НомерГода = 1 ИЛИ НЕ НомерКвартала = Число(Формат(НачалоДействияРазрешения, "ДФ=к")) Тогда
							
							ДатаНачала = НачалоКвартала(ДатаНачала);
							
						Иначе
							
							ДатаНачала = НачалоДня(ДатаНачала);
							
						КонецЕсли;
						
						Если НЕ НомерГода = КоличествоЛет ИЛИ НЕ КонецКвартала(ДатаНачала) > КонецДействияРазрешения Тогда
							
							ДатаОкончания = КонецКвартала(ДатаНачала);
							
						Иначе 
							
							ДатаОкончания = КонецДня(КонецДействияРазрешения);
							
						КонецЕсли;
						
						//ДатаОкончания = ?(НомерГода = КоличествоЛет И КонецКвартала(ДатаНачала) > КонецДействияРазрешения, 
						//	КонецДня(КонецДействияРазрешения), КонецКвартала(ДатаНачала));
							
						СтруктураЗаполнения = Новый Структура("Период, ДатаОкончанияДействияНорматива, ПДВ, ВСВ",
							ДатаНачала, ДатаОкончания, ТекущаяСтрока["РазрешенныйВыбросГод" + Строка(НомерГода) + "Квартал" + Строка(НомерКвартала)], 
							ТекущаяСтрока["ВСВГод" + Строка(НомерГода) + "Квартал" + Строка(НомерКвартала)]);
							
						Если НЕ ДатаНачала = НачалоКвартала(ДатаНачала) ИЛИ ДатаНачала = НачалоГода(ДатаНачала) Тогда
							
							СтруктураЗаполнения.Вставить("ПДВМощность", ТекущаяСтрока["МощностьВыбросаГод" + Строка(НомерГода)]);
							СтруктураЗаполнения.Вставить("ВСВМощность", ТекущаяСтрока["МощностьВыбросаВСВГод" + Строка(НомерГода)]);
							
						КонецЕсли;
							
						Если РазрешениеПоИЗА Тогда
								
							ТекущийИЗА = ИсточникиЗагрязнения.Найти(ТекущаяСтрока.ИдентификаторИЗА, "ИдентификаторСтроки").ИсточникЗагрязнения;
							СтруктураЗаполнения.Вставить("ИсточникЗагрязнения", ТекущийИЗА);
						Иначе
							
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(Движение, СтруктураЗаполнения);						
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// ДАВ 20.11.15 ++
	РегистрыСведений.ДанныеКалендаряЭколога.УдалитьЗапись(Ссылка);	
	РегистрыСведений.ДанныеКалендаряЭколога.ДобавитьЗапись(Ссылка, Перечисления.ВидыСобытийКалендаряЭколога.ИстекСрокДействияРазрешительногоДокумента, КонецДействияРазрешения, Перечисления.ТипыДокументовДляСроковПоКалендарюЭколога.Выбросы);
	// --		
					
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеДокументовСправочников.ЗаполнитьДокумент(ЭтотОбъект);
	
	
	Попытка
		Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.РазрешениеНаВыбросВАтмосферуОбщий") Тогда 
		
			Организация = ДанныеЗаполнения.Организация;
			НачалоДействияРазрешения = ДанныеЗаполнения.НачалоДействияРазрешения;
			КонецДействияРазрешения = ДанныеЗаполнения.КонецДействияРазрешения;
			ПериодичностьРазрешения = ДанныеЗаполнения.ПериодичностьРазрешения;
			РегистрационныйНомер = ДанныеЗаполнения.РегистрационныйНомер;
			ДатаВыдачи = ДанныеЗаполнения.ДатаВыдачи;
			НадзорныйОрган = ДанныеЗаполнения.НадзорныйОрган;
			ДокументОснование = ДанныеЗаполнения.ДокументОснование;
			ОписаниеРазрешительногоДокумента = ДанныеЗаполнения.ОписаниеРазрешительногоДокумента;
		
		КонецЕсли; 
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриЗаписи( Отказ )

// 1СКСУ - Казанцев И.В. 19.01.17 10:50
// При провере АПК не обнаружена конструкция "Если ОбменДанными.Загрузка Тогда ...".
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли; 
// 1СКСУ - Казанцев И.В. 19.01.17 10:50 Конец

	
	// Работа с бизнес-процессами
	Если Обработки.СозданиеНСИ.ИспользоватьМеханизмБизнесПроцессов( Ссылка ) И Не Проведен Тогда
		Обработки.СозданиеНСИ.ЗапуститьБизнесПроцессСогласования( Ссылка );
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением( Отказ )

// 1СКСУ - Казанцев И.В. 19.01.17 10:50
// При провере АПК не обнаружена конструкция "Если ОбменДанными.Загрузка Тогда ...".
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли; 
// 1СКСУ - Казанцев И.В. 19.01.17 10:50 Конец

	
	// Работа с бизнес-процессами
	Если Обработки.СозданиеНСИ.ИспользоватьМеханизмБизнесПроцессов( Ссылка ) Тогда
		Если Не Обработки.СозданиеНСИ.ЭлементДоступенДляРедактирования( Ссылка ) Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверкаСоответствияНормативовВкладок(Отказ, Ошибки)
	
	ИсходнаяТаблица = ПереченьКоличествоЗВРазрешенныхКВыбросуИЗА.Выгрузить();
	СтрокаСуммирования = "";
	
	КоличествоЛет = Год(КонецДействияРазрешения)-Год(НачалоДействияРазрешения)+1;
	
	Для НумГод = 1 По КоличествоЛет Цикл
		
		ТекущийГод = "Год" + Строка(НумГод);
		СтрокаСуммирования = СтрокаСуммирования + ", РазрешенныйВыброс" + ТекущийГод + ", ВСВ" + ТекущийГод + ", МощностьВыброса" + ТекущийГод + ", МощностьВыбросаВСВ" + ТекущийГод;
		
		Если ПериодичностьРазрешения = Перечисления.ПериодичностьРазрешительнойДокументации.Поквартально Тогда
			Для НумКвартал = 1 По 4 Цикл			
				ТекущийКвартал = "Квартал" + Строка(НумКвартал);
				СтрокаСуммирования = СтрокаСуммирования + ", РазрешенныйВыброс" + ТекущийГод + ТекущийКвартал + ", ВСВ" + ТекущийГод + ТекущийКвартал;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаСуммирования = Прав(СтрокаСуммирования,СтрДлина(СтрокаСуммирования)-2);
	ИсходнаяТаблица.Свернуть("ЗагрязняющееВещество", СтрокаСуммирования);
	
	Для Каждого ТекущаяСтрока Из ТаблицаЗВ Цикл
		ИсходнаяСтрока = ИсходнаяТаблица.Найти(ТекущаяСтрока.ЗагрязняющееВещество);
		Если ИсходнаяСтрока = Неопределено Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрязняющее вещество в строке %1 не найдено в таблице по вкладке ИЗА. Не удалось провести документ'"),
				ТекущаяСтрока.НомерСтроки);
				
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
				"ТаблицаЗВ[%1].ЗагрязняющееВещество",
				ТекстОшибки,
				"ТаблицаЗВ",
				ТекущаяСтрока.НомерСтроки - 1,
				ТекстОшибки);
					
			Отказ = Истина;
			
			Продолжить;			
			
		КонецЕсли;
		
		Для НумГод = 1 По КоличествоЛет Цикл
			
			ТекущийГод = "Год" + Строка(НумГод);
			
			Если ПериодичностьРазрешения = Перечисления.ПериодичностьРазрешительнойДокументации.ПоГодам Тогда
				
				СравнениеНормативов(ИсходнаяСтрока, ТекущаяСтрока, "РазрешенныйВыброс", ТекущийГод, ТекущаяСтрока.НомерСтроки, Отказ, Ошибки);
				СравнениеНормативов(ИсходнаяСтрока, ТекущаяСтрока, "ВСВ", ТекущийГод, ТекущаяСтрока.НомерСтроки, Отказ, Ошибки);
				
			КонецЕсли;
			
			СравнениеНормативов(ИсходнаяСтрока, ТекущаяСтрока, "МощностьВыброса", ТекущийГод, ТекущаяСтрока.НомерСтроки, Отказ, Ошибки);
			СравнениеНормативов(ИсходнаяСтрока, ТекущаяСтрока, "МощностьВыбросаВСВ", ТекущийГод, ТекущаяСтрока.НомерСтроки, Отказ, Ошибки);
			
			Если ПериодичностьРазрешения = Перечисления.ПериодичностьРазрешительнойДокументации.Поквартально Тогда
				Для НумКвартал = 1 По 4 Цикл			
					
					ТекущийКвартал = "Квартал" + Строка(НумКвартал);
					
					СравнениеНормативов(ИсходнаяСтрока, ТекущаяСтрока, "РазрешенныйВыброс", ТекущийГод, ТекущаяСтрока.НомерСтроки, Отказ, Ошибки, ТекущийКвартал);
					СравнениеНормативов(ИсходнаяСтрока, ТекущаяСтрока, "ВСВ", ТекущийГод, ТекущаяСтрока.НомерСтроки, Отказ, Ошибки, ТекущийКвартал);
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
				
КонецПроцедуры

Процедура СравнениеНормативов(ИсходнаяСтрока, ТекущаяСтрока, ПрефиксКолонки, ТекущийГод, НомерСтроки, Отказ, Ошибки, ТекущийКвартал = "");
	
	Если НЕ ИсходнаяСтрока[ПрефиксКолонки + ТекущийГод + ТекущийКвартал] = ТекущаяСтрока[ПрефиксКолонки + ТекущийГод + ТекущийКвартал] Тогда
		
		ОшибочнаяКолонка = " за " + Формат(Год(НачалоДействияРазрешения) + Число(Прав(ТекущийГод,1))-1,"ЧГ=") + " год ";
		Если ЗначениеЗаполнено(ТекущийКвартал) Тогда
			ОшибочнаяКолонка = ОшибочнаяКолонка + Прав(ТекущийКвартал,1) + " квартал ";
		КонецЕсли;
		
		ИмяКолонки = "";
		Если ПрефиксКолонки = "МощностьВыброса" Тогда
			ИмяКолонки = "ПДВ, г/с";
		ИначеЕсли ПрефиксКолонки = "МощностьВыбросаВСВ" Тогда
			ИмяКолонки = "ВСВ, г/с";
		ИначеЕсли ПрефиксКолонки = "РазрешенныйВыброс" Тогда
			ИмяКолонки = "ПДВ, т/г";
		ИначеЕсли ПрефиксКолонки = "ВСВ" Тогда
			ИмяКолонки = "ВСВ, т/г";
		КонецЕсли;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Норматив " + ИмяКолонки + ОшибочнаяКолонка + " в строке %1 отличается от суммарного норматива по ИЗА. Не удалось провести документ'"),
			НомерСтроки);
				
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
			"ТаблицаЗВ[%1]." + ПрефиксКолонки + ТекущийГод + ТекущийКвартал,
			ТекстОшибки,
			"ТаблицаЗВ",
			НомерСтроки - 1,
			ТекстОшибки);
			
		Отказ = Истина;
				
	КонецЕсли;
	
КонецПроцедуры;

#КонецОбласти

#КонецЕсли
