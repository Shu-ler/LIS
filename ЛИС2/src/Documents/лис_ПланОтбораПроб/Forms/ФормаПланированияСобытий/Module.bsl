#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СтандарнтыеНастройкиКалендаря()

	 НастройкиКалендаря.Очистить();
	 
	 НС = НастройкиКалендаря.Добавить();
	 НС.КоличествоСобытий = 1;
	 НС.Цвет = WebЦвета.Золотой;  
	 	 
	 НС = НастройкиКалендаря.Добавить();
	 НС.КоличествоСобытий = 2;
	 НС.Цвет = WebЦвета.Оранжевый;

	 НС = НастройкиКалендаря.Добавить();
	 НС.КоличествоСобытий = 3;
	 НС.Цвет = WebЦвета.Коралловый;

	 НС = НастройкиКалендаря.Добавить();
	 НС.КоличествоСобытий = 4;
	 НС.Цвет = WebЦвета.ОранжевоКрасный;
	 
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьПланированиеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда 
		
		Для каждого Событие из События Цикл
			Событие.ДатаНачала = Дата("00010101");
			Событие.ДатаОкончания = Дата("00010101");
		КонецЦикла;

		Элементы.Календарь.Обновить();
		
		Если Элементы.ОтборСобытийПоДате.Пометка Тогда
			ВключитьОтборСобытийПоДате();
		КонецЕсли;	
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСобытияВоВременноеХранилище()
	
	ПоместитьВоВременноеХранилище(События.Выгрузить(), АдресВременногоХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтборСобытийПоДате()
	
	Для каждого Событие из События Цикл
		
		ВидимостьСобытия = Ложь;
		
		Если Событие.ДатаНачала = Календарь или
			 Событие.ДатаОкончания = Календарь или 
			(ЗначениеЗаполнено(Событие.ДатаНачала) и ЗначениеЗаполнено(Событие.ДатаОкончания) и 
			 Событие.ДатаНачала < Календарь и Календарь < Событие.ДатаОкончания) Тогда
			
			ВидимостьСобытия = Истина;
		КонецЕсли;
		
		Событие.Видимость = ВидимостьСобытия;
		
	КонецЦикла;
	
	Элементы.События.ОтборСтрок = новый ФиксированнаяСтруктура("Видимость", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтборСобытийПоДате()
	
	Для каждого Событие из События Цикл
		Событие.Видимость = Истина;
	КонецЦикла;
	
	Элементы.События.ОтборСтрок = новый ФиксированнаяСтруктура();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗавершенияРедактирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СохранитьСобытияВоВременноеХранилище();
	
		Закрыть(АдресВременногоХранилища);

	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Календарь = ТекущаяДата();
	
	// Получаем входную таблицу событий
	АдресВременногоХранилища = Параметры.АдресВременногоХранилища;
	ТаблицаСобытий = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	// Создаем на форме реквизиты для колонок входной таблицы событий
	МассивРеквизитов = новый Массив;
	Для каждого КолонкаТаблицыСобытий из ТаблицаСобытий.Колонки Цикл
		Если КолонкаТаблицыСобытий.Имя <> "ДатаНачала" и КолонкаТаблицыСобытий.Имя <> "ДатаОкончания" и КолонкаТаблицыСобытий.Имя <> "Видимость" Тогда
			
			НРФ = новый РеквизитФормы(КолонкаТаблицыСобытий.Имя, КолонкаТаблицыСобытий.ТипЗначения, "События", КолонкаТаблицыСобытий.Заголовок);
			МассивРеквизитов.Добавить(НРФ);
			
		КонецЕсли;	
	КонецЦикла;
	ИзменитьРеквизиты(МассивРеквизитов);  
	
	// Создаем на форме элементы для колонок входной таблицы событий 
	Для каждого КолонкаТаблицыСобытий из ТаблицаСобытий.Колонки Цикл
		Если КолонкаТаблицыСобытий.Имя <> "ДатаНачала" и КолонкаТаблицыСобытий.Имя <> "ДатаОкончания" и КолонкаТаблицыСобытий.Имя <> "Видимость" Тогда
	
			НЭ = Элементы.Добавить("События" + КолонкаТаблицыСобытий.Имя, Тип("ПолеФормы"), Элементы.События); 
			НЭ.ПутьКДанным = "События." + КолонкаТаблицыСобытий.Имя;
			НЭ.ОграничениеТипа = КолонкаТаблицыСобытий.ТипЗначения;
			НЭ.Вид = ВидПоляФормы.ПолеВвода;
			НЭ.Заголовок = КолонкаТаблицыСобытий.Заголовок;
			
			// Доступность только кнопки "Открыть"
			НЭ.КнопкаОткрытия = Истина;
			НЭ.КнопкаВыбора = Ложь;
			НЭ.КнопкаВыпадающегоСписка = Ложь;
			НЭ.КнопкаСоздания = Ложь;
			НЭ.КнопкаОчистки = Ложь;
			НЭ.КнопкаРегулирования = Ложь;
			НЭ.РедактированиеТекста = Ложь;
			НЭ.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
			НЭ.УстановитьДействие("Очистка", "СобытияДинамическиеКолонкиОчистка");
			НЭ.УстановитьДействие("НачалоВыбора", "СобытияДинамическиеКолонкиНачалоВыбора");
			
		КонецЕсли;	
	КонецЦикла;

	// Загружаем данные на форму из входной таблицы событий 
	Для каждого Событие из ТаблицаСобытий Цикл
		НС = События.Добавить();
		НС.Видимость = Истина;
		ЗаполнитьЗначенияСвойств(НС, Событие);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НастройкиКалендаря.Количество() = 0 Тогда
		СтандарнтыеНастройкиКалендаря();
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура СобытияДатаНачалаПриИзменении(Элемент)
	
	Элементы.Календарь.Обновить();
	
	Если Элементы.ОтборСобытийПоДате.Пометка Тогда
		ВключитьОтборСобытийПоДате();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияДатаОкончанияПриИзменении(Элемент)
	
	Элементы.Календарь.Обновить();
	
	Если Элементы.ОтборСобытийПоДате.Пометка Тогда
		ВключитьОтборСобытийПоДате();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СобытияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;

КонецПроцедуры

&НаКлиенте
Процедура СобытияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Дата") Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	Иначе
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СобытияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Если Поле.Имя = "СобытияДатаОкончания" Тогда
			События.НайтиПоИдентификатору(Строка).ДатаОкончания = ПараметрыПеретаскивания.Значение;
		Иначе	
			События.НайтиПоИдентификатору(Строка).ДатаНачала = ПараметрыПеретаскивания.Значение;
		КонецЕсли;
	
		Элементы.Календарь.Обновить();
		
		Если Элементы.ОтборСобытийПоДате.Пометка Тогда
			ВключитьОтборСобытийПоДате();
		КонецЕсли;	
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СобытияДинамическиеКолонкиОчистка(Элемент, СтандартнаяОбработка);
	
	 СтандартнаяОбработка = Ложь;
	 
	 ТекстСообщения = НСтр("ru = 'Действие недоступно.'");
	 ПоказатьПредупреждение(, ТекстСообщения); 
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияДинамическиеКолонкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	 ТекстСообщения = НСтр("ru = 'Действие недоступно.'");
	 ПоказатьПредупреждение(, ТекстСообщения); 
	
КонецПроцедуры


&НаКлиенте
Процедура КалендарьПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Для каждого ДатаПериода из ОформлениеПериода.Даты Цикл
		
		КоличествоСобытийДатыПериода = 0;
		Для каждого Событие из События Цикл	
			Если Событие.ДатаНачала = ДатаПериода.Дата или
				 Событие.ДатаОкончания = ДатаПериода.Дата или 
				(ЗначениеЗаполнено(Событие.ДатаНачала) и ЗначениеЗаполнено(Событие.ДатаОкончания) и 
				 Событие.ДатаНачала < ДатаПериода.Дата и ДатаПериода.Дата < Событие.ДатаОкончания) Тогда
					  
				КоличествоСобытийДатыПериода = КоличествоСобытийДатыПериода + 1;
				
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоСобытийДатыПериода > 0 Тогда
			
			Счетчик = НастройкиКалендаря.Количество()-1;
			Пока Счетчик >= 0 Цикл
				
				Если КоличествоСобытийДатыПериода >= НастройкиКалендаря[Счетчик].КоличествоСобытий Тогда
					ДатаПериода.ЦветФона = НастройкиКалендаря[Счетчик].Цвет;
					Прервать;
				КонецЕсли;
				
				Счетчик = Счетчик - 1;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДеньНедели(ДатаПериода.Дата) >= 6 Тогда
			ДатаПериода.ЦветТекста = webЦвета.Красный; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;

КонецПроцедуры

&НаКлиенте
Процедура КалендарьПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата)

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") и 
		 ПараметрыПеретаскивания.Значение.Количество() > 0 и
		 ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДанныеФормыЭлементКоллекции") и
		 ПараметрыПеретаскивания.Значение[0].Свойство("ДатаНачала") и
		 ПараметрыПеретаскивания.Значение[0].Свойство("ДатаОкончания") Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	Иначе
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ВыбраннаяДата)
	
	Для каждого Событие из ПараметрыПеретаскивания.Значение Цикл 
		Если Элементы.События.ТекущийЭлемент.Имя = "СобытияДатаОкончания" Тогда
			Событие.ДатаОкончания = ВыбраннаяДата;
		Иначе
			Событие.ДатаНачала = ВыбраннаяДата;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Календарь.Обновить();
	
	Если Элементы.ОтборСобытийПоДате.Пометка Тогда
		ВключитьОтборСобытийПоДате();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриАктивизацииДаты(Элемент)
	
	Если Элементы.ОтборСобытийПоДате.Пометка Тогда
		ВключитьОтборСобытийПоДате();
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура НастройкиКалендаряПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда

		Если НастройкиКалендаря.Количество() = 1 Тогда
			Элементы.НастройкиКалендаря.ТекущиеДанные.КоличествоСобытий = 1;
		Иначе
			Элементы.НастройкиКалендаря.ТекущиеДанные.КоличествоСобытий = НастройкиКалендаря[НастройкиКалендаря.Количество()-2].КоличествоСобытий + 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКалендаряКоличествоСобытийПриИзменении(Элемент)

	НастройкиКалендаря.Сортировать("КоличествоСобытий");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКалендаряПриИзменении(Элемент)

	Элементы.Календарь.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьНастройкиКалендаря(Команда)
	
	Элементы.ОткрытьНастройкиКалендаря.Пометка = не Элементы.ОткрытьНастройкиКалендаря.Пометка;
	
	Элементы.ГруппаНастройкиКалендаря.Видимость = Элементы.ОткрытьНастройкиКалендаря.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройкиКалендаря(Команда)
	
	СтандарнтыеНастройкиКалендаря();
	
	Элементы.Календарь.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПланирование(Команда)
	
	ОписаниеОповещения = новый ОписаниеОповещения("ВопросОчиститьПланированиеЗавершение", ЭтотОбъект);
	ТекстСообщения = НСтр("ru = 'Очистить планирование?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	ЕстьОшибкиЗаполнения = Ложь;
	Для каждого Событие из События Цикл
		
		ТекстСообщения = "";
		Поле = "";
		Если ЗначениеЗаполнено(Событие.ДатаОкончания) Тогда
			
			Если не ЗначениеЗаполнено(Событие.ДатаНачала) Тогда
				ТекстСообщения = НСтр("ru = 'Не указана дата начала события.'");
				Поле = "События[" + События.Индекс(Событие) + "].ДатаНачала";
			ИначеЕсли Событие.ДатаНачала > Событие.ДатаОкончания Тогда
				ТекстСообщения = НСтр("ru = 'Дата окончания события должна быть больше даты его начала.'");
				Поле = "События[" + События.Индекс(Событие) + "].ДатаОкончания";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			
			Если Событие.Видимость = Ложь и Элементы.ОтборСобытийПоДате.Пометка Тогда
				Элементы.ОтборСобытийПоДате.Пометка = Ложь;
				ОтключитьОтборСобытийПоДате();
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, , ЕстьОшибкиЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибкиЗаполнения Тогда

		ВопросЗавершенияРедактирования = Новый ОписаниеОповещения("ВопросЗавершенияРедактирования", ЭтотОбъект);
		ТекстСообщения = НСтр("ru = 'Обнаружены некорректные даты." + Символы.ПС + "Завершить редактирование?'");
		ПоказатьВопрос(ВопросЗавершенияРедактирования, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;

	КонецЕсли;
	
	СохранитьСобытияВоВременноеХранилище();
	
	Закрыть(АдресВременногоХранилища);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРедактирование(Команда)
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ОтборСобытийПоДате(Команда)
	
	Элементы.ОтборСобытийПоДате.Пометка = не Элементы.ОтборСобытийПоДате.Пометка;
	
	Если Элементы.ОтборСобытийПоДате.Пометка Тогда
		ВключитьОтборСобытийПоДате();
	Иначе
		ОтключитьОтборСобытийПоДате();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


