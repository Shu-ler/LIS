
Функция ВычислитьЗначениеФормулы(Методика, ПоказателиФормулы) Экспорт

	// Получаем структуру формулы
	СтруктураФормулы = новый ТаблицаЗначений;
	СтруктураФормулы.Колонки.Добавить("Элемент");
	СтруктураФормулы.Колонки.Добавить("ЭтоПараметр");
	
	СимволыОпераций = "+-*/^()";

	ВременнаяСтрока = "";
	Для Счетчик = 1 по СтрДлина(Методика.Формула) Цикл
		ТекущийСимвол = Сред(Методика.Формула, Счетчик, 1);
		ТекущийСимволОперации = СтрНайти(СимволыОпераций, ТекущийСимвол) > 0;
		
		// Разбираем операдны формулы
		Если не ТекущийСимволОперации Тогда	
			 ВременнаяСтрока = ВременнаяСтрока + ТекущийСимвол;
		КонецЕсли;
		
		Если ТекущийСимволОперации или Счетчик = СтрДлина(Методика.Формула) Тогда
			
			ВременнаяСтрока = СокрЛП(ВременнаяСтрока);
			Если ВременнаяСтрока <> "" Тогда 
				
				Если СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ВременнаяСтрока) = Неопределено Тогда
					НС = СтруктураФормулы.Добавить(); 
					НС.Элемент = ВременнаяСтрока;
					НС.ЭтоПараметр = Истина;
				Иначе
					Для СчетчикВС = 1 по СтрДлина(ВременнаяСтрока) Цикл
						ТекущийСимволВС = Сред(ВременнаяСтрока, СчетчикВС, 1);
						Если ТекущийСимволВС = " " Тогда
							Продолжить;
						КонецЕсли;
						Если ТекущийСимволВС = "," Тогда
							ТекущийСимволВС = ".";
						КонецЕсли;
						НС = СтруктураФормулы.Добавить(); 
						НС.Элемент = ТекущийСимволВС;
						НС.ЭтоПараметр = Ложь;
					КонецЦикла;
				КонецЕсли;
				
				ВременнаяСтрока = "";	
			КонецЕсли;
		КонецЕсли;
		
		// Разбираем операторы формулы
		Если ТекущийСимволОперации Тогда					
			НС = СтруктураФормулы.Добавить(); 
			НС.Элемент = ТекущийСимвол;
			НС.ЭтоПараметр = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Подставляем значения параметров
	Для каждого ЭлементФормулы из СтруктураФормулы Цикл
		Если ЭлементФормулы.ЭтоПараметр Тогда 
			
			Параметр = ПоказателиФормулы.Найти(ЭлементФормулы.Элемент, "Показатель");
			Если Параметр = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Если ТипЗнч(Параметр.Значение) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
						
			ЭлементФормулы.Элемент = Строка(Параметр.Значение);
			ЭлементФормулы.Элемент = СтрЗаменить(ЭлементФормулы.Элемент, Символы.НПП, "");
			ЭлементФормулы.Элемент = СтрЗаменить(ЭлементФормулы.Элемент, ",", ".");
			ЭлементФормулы.Элемент = ?(Параметр.Значение < 0, "(" + ЭлементФормулы.Элемент + ")", ЭлементФормулы.Элемент);  
		
		КонецЕсли;
	КонецЦикла;
	
	// Обрабатываем операцию возведения в степень
	Счетчик = 0;
	Пока Счетчик < СтруктураФормулы.Количество() Цикл
		ЭлементФормулы = СтруктураФормулы[Счетчик];
		Если ЭлементФормулы.Элемент = "^" Тогда
			
			ЭлементФормулы.Элемент = ",";
			
			СчетчикНазад = Счетчик - 1;
			КоличествоОткрывающихСкобок = 0;
			КоличествоЗакрывающихСкобок = 0;
			НовыйЭлементФормулы = Неопределено;
			Пока СчетчикНазад >= 0 Цикл
				ПредыдущийЭлементФормулы = СтруктураФормулы[СчетчикНазад];
				
				Если ПредыдущийЭлементФормулы.Элемент = "(" или ПредыдущийЭлементФормулы.Элемент = "Pow(" Тогда
					КоличествоОткрывающихСкобок = КоличествоОткрывающихСкобок + 1;
				ИначеЕсли ПредыдущийЭлементФормулы.Элемент = ")" Тогда
					КоличествоЗакрывающихСкобок = КоличествоЗакрывающихСкобок + 1;
				КонецЕсли;
				
				Если КоличествоЗакрывающихСкобок = 0 или КоличествоОткрывающихСкобок = КоличествоЗакрывающихСкобок Тогда
					Если СчетчикНазад = 0 Тогда 
						НовыйЭлементФормулы = СтруктураФормулы.Вставить(0);
						НовыйЭлементФормулы.Элемент = "Pow(";
						Прервать;
					ИначеЕсли СтрНайти("+-*/", ПредыдущийЭлементФормулы.Элемент) > 0 Тогда
						НовыйЭлементФормулы = СтруктураФормулы.Вставить(СчетчикНазад + 1);
						НовыйЭлементФормулы.Элемент = "Pow(";
						Прервать;
					ИначеЕсли ПредыдущийЭлементФормулы.Элемент = "(" и КоличествоЗакрывающихСкобок = 0  Тогда
						НовыйЭлементФормулы = СтруктураФормулы.Вставить(СчетчикНазад + 1);
						НовыйЭлементФормулы.Элемент = "Pow(";
						Прервать;	
					КонецЕсли;
				КонецЕсли;
				
				СчетчикНазад = СчетчикНазад - 1;
			КонецЦикла;
			
			Если НовыйЭлементФормулы = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			Счетчик = Счетчик + 1;

			СчетчикВперед = Счетчик + 1;
			КоличествоОткрывающихСкобок = 0;
			КоличествоЗакрывающихСкобок = 0;
			НовыйЭлементФормулы = Неопределено;
			Пока СчетчикВперед < СтруктураФормулы.Количество() Цикл
				СледующийЭлементФормулы = СтруктураФормулы[СчетчикВперед];
				
				Если СледующийЭлементФормулы.Элемент = "(" Тогда
					КоличествоОткрывающихСкобок = КоличествоОткрывающихСкобок + 1;
				ИначеЕсли СледующийЭлементФормулы.Элемент = ")" Тогда
					КоличествоЗакрывающихСкобок = КоличествоЗакрывающихСкобок + 1;
				ИначеЕсли СледующийЭлементФормулы.Элемент = "-" и СчетчикВперед = Счетчик + 1 Тогда
					СчетчикВперед = СчетчикВперед + 1;
					Продолжить;
				КонецЕсли;
				
				Если КоличествоОткрывающихСкобок = 0 или КоличествоОткрывающихСкобок = КоличествоЗакрывающихСкобок Тогда
					Если СчетчикВперед = СтруктураФормулы.Количество() - 1 Тогда 
						НовыйЭлементФормулы = СтруктураФормулы.Добавить();
						НовыйЭлементФормулы.Элемент = ")";
						Прервать;
					ИначеЕсли СтрНайти("+-*/^", СледующийЭлементФормулы.Элемент) > 0 Тогда
						НовыйЭлементФормулы = СтруктураФормулы.Вставить(СчетчикВперед);
						НовыйЭлементФормулы.Элемент = ")";
						Прервать;
					ИначеЕсли СледующийЭлементФормулы.Элемент = ")" и КоличествоОткрывающихСкобок = 0 Тогда
						НовыйЭлементФормулы = СтруктураФормулы.Вставить(СчетчикВперед);
						НовыйЭлементФормулы.Элемент = ")";
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				СчетчикВперед = СчетчикВперед + 1;
			КонецЦикла;
			
			Если НовыйЭлементФормулы = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	// Вычисляем значение
	СтрокаФормулы = "";
	Для каждого ЭлементФормулы из СтруктураФормулы Цикл
		СтрокаФормулы = СтрокаФормулы + ЭлементФормулы.Элемент;
	КонецЦикла;
	
	Попытка
		Возврат Вычислить(СтрокаФормулы);
	Исключение
		Возврат Неопределено;
	КонецПопытки;

КонецФункции