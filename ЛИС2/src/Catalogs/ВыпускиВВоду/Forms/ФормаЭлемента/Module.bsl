#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация	
	
	ВидОбъектаРека = Перечисления.ВидыВодногоОбъекта.Река20;
	УправлениеВидимостью(ЭтаФорма);
	
	ПриборыУчета.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	
	// Работа с бизнес-процессами
	Если Обработки.СозданиеНСИ.ИспользоватьМеханизмБизнесПроцессов( Объект.Ссылка ) Тогда
		БП_ПоддержкаБизнесПроцессовСервер.ОбработатьОткрытиеФормаОбъекта( ЭтотОбъект );
		ЭтотОбъект.ТолькоПросмотр = Не Обработки.СозданиеНСИ.ЭлементДоступенДляРедактирования( Объект.Ссылка );
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Работа с бизнес-процессами
	Если Обработки.СозданиеНСИ.ИспользоватьМеханизмБизнесПроцессов( Объект.Ссылка ) Тогда
		Обработки.СозданиеНСИ.ПроверитьЗаполнениеРеквизитов( ЭтотОбъект, Отказ );
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере( ТекущийОбъект, ПараметрыЗаписи )
	
	ПриборыУчета.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	
	// Работа с бизнес-процессами
	ПослеЗаписиОбъектаБизнесПроцессаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием( Отказ, СтандартнаяОбработка )
	
	// Работа с бизнес-процессами
	Если Не ЗакрыватьБезусловно И ЗадачаИсполнителяНеЗавершенаНаСервере() Тогда 
		текОповещение = Новый ОписаниеОповещения( "ПослеЗакрытияВопросаЗакрытиеФормы", ЭтотОбъект );	
		ПоказатьВопрос( текОповещение, "Отправить на согласование введенные данные о выпуске в воду '" + Объект.Ссылка + "'?", РежимДиалогаВопрос.ДаНет );

		Отказ				= Истина;
		ЗакрыватьБезусловно = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВодныйОбъектПриИзменении(Элемент)
	УправлениеВидимостью(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственнаяПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Организация"" не заполнено", , "Объект.Организация", ,);
		
	КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ВидВодВыпускаПриИзменении(Элемент)
//	
//	Элементы.ВодныйОбъект.ОтметкаНезаполненного = Элемент.ВыделенныйТекст <> "Поставщик" ;
//	
//КонецПроцедуры

&НаКлиенте
Процедура ПриборыУчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтруктураПараметры = Новый Структура("Владелец, Организация", Объект.Ссылка, Объект.Организация);
		// 1СКСУ - Казанцев И.В. 25.01.17 13:30
		// При проверке АПК не рекомендуется использовать функцию ПолучитьФорму(). Вместо нее рекомендуется ОткрытьФорму(). 
		//ФормаПрибора = ПолучитьФорму("Справочник.ПриборыУчетаИспользованияВоды.ФормаОбъекта",СтруктураПараметры);
		//ФормаПрибора.Открыть();
		ОткрытьФорму("Справочник.ПриборыУчетаИспользованияВоды.ФормаОбъекта",СтруктураПараметры,Элемент,УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		// 1СКСУ - Казанцев И.В. 25.01.17 13:30 Конец
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо сохранить Водовыпуск");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// 1С-КСУ +++ Балацкий А.Н. 04.01.17
// По замечаниям отключен механизм управления видимостью элемента Расстояние от устья. Независимо от кода типа источника видимость Истина.

//&НаСервереБезКонтекста
//Функция ПолучитьСписокВидовВодныхОбъектовРасстояниеДоУстья()
//	
//	//масСписокВидовВодныхОбъектов = Новый Массив;
//	//
//	//масСписокВидовВодныхОбъектов.Добавить( Справочники.КодыТипыИсточниковПриемников.Река );
//	//масСписокВидовВодныхОбъектов.Добавить( Справочники.КодыТипыИсточниковПриемников.ПодземныйВодныйОбъект );
//	//масСписокВидовВодныхОбъектов.Добавить( Справочники.КодыТипыИсточниковПриемников.ШахтаРудникНефтепромыселКарьер );
//	
//	Возврат Справочники.Водозаборы.ПолучитьСписокВидовВодныхОбъектовРасстояниеДоУстья();
//	
//КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(Форма)
	
//	//ВидВодногоОбъекта = ?( ЗначениеЗаполнено( Форма.Объект.ВодныйОбъект ), ПолучитьВидВодногоОбъекта(Форма.Объект.ВодныйОбъект), Неопределено );
//	ВидВодногоОбъекта = Форма.Объект.КодТипаИсточникаПриемника;
//	
//	масСписокВидовВодныхОбъектов = ПолучитьСписокВидовВодныхОбъектовРасстояниеДоУстья();

//	Форма.Элементы.РасстояниеОтУстья.Видимость = ( масСписокВидовВодныхОбъектов.Найти( ВидВодногоОбъекта ) <> Неопределено );
////	Форма.Элементы.РасстояниеОтУстья.Видимость = (ВидВодногоОбъекта = Форма.ВидОбъектаРека);
//	
//	Если НЕ Форма.Элементы.РасстояниеОтУстья.Видимость Тогда
//		Форма.Объект.РасстояниеОтУстья = 0;
//	КонецЕсли;
	
КонецПроцедуры

// 1С-КСУ --- Балацкий А.Н. 04.01.17

// 1СКСУ - Казанцев И.В. - 24.01.17 13:30
// При провере АПК не обнаружено ссылок на процедуру/функцию. Процедура/функция закомментирована.
//&НаСервереБезКонтекста
//Функция ПолучитьВидВодногоОбъекта(ВодныйОбъект)
//	
//	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВодныйОбъект, "ВидВодногоОбъекта");
//	
//КонецФункции
// 1СКСУ - Казанцев И.В. - 24.01.17 13:30 Конец

////////////////////////////////////////////////////////////////////////////////
// Поддержка контактной информации.

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка(ЭтотОбъект, Элемент.Имя);
	Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	Результат = УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда(ЭтотОбъект, Команда.Имя);
	Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВводаАдреса(ЭтотОбъект, Результат);
КонецПроцедуры

&НаСервере
Функция Подключаемый_ОбновитьКонтактнуюИнформацию(Результат = Неопределено)
	Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецФункции

#КонецОбласти

// Работа с бизнес-процессами
#Область ФункцииБизнесПроцессов

&НаКлиенте
Процедура ВыполнитьЗадачу( Команда ) Экспорт
	
	Если Модифицированность Тогда
		текОповещение = Новый ОписаниеОповещения( "ПослеЗакрытияВопросаЗаписи", ЭтотОбъект, Команда );	
		ПоказатьВопрос( текОповещение, "Для выполнения операции объект должен быть записан. Записать?", РежимДиалогаВопрос.ДаНет );		
	Иначе
		стрКомментарий = "";
		
		текОповещение  = Новый ОписаниеОповещения( "ПослеВводаКомментария", ЭтотОбъект );	
		
		ПоказатьВводСтроки( текОповещение, стрКомментарий, "Введите комментарий выполненой задачи" );
		
		ЗавершитьЗадачуНаСервере( Команда.Имя );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписи( Результат, Команда ) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		Записать();
		ВыполнитьЗадачу( Команда );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗакрытиеФормы( Результат, ДополнительныеПараметры ) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		текКомандаВыполнения = ПолучитьКомандуВыполнения();
		Если текКомандаВыполнения <> Неопределено Тогда 
			ВыполнитьЗадачу( текКомандаВыполнения );
		КонецЕсли;
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКомментария( фпКомментарий, фпПараметры ) Экспорт
	
	Если Не ПустаяСтрока( фпКомментарий ) Тогда
		УстановитьКомментарийЗадачиНаСервере( ЭтотОбъект.БП_ВыполняемаяЗадача, фпКомментарий );	
	КонецЕсли;
	
	Если Открыта() Тогда 
		Закрыть();
	КонецЕсли;
	
	Оповестить( "БП_ВыполнениеЗадачи", Объект.Ссылка );
	
КонецПроцедуры

&НаКлиенте
Процедура БП_ВыполнитьЗадачу( Команда )
	
	БП_ПоддержкаБизнесПроцессовКлиент.ВыполнитьЗадачу( ЭтотОбъект, Команда );
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКомандуВыполнения()
	
	Для Каждого текКоманда Из Команды Цикл 	
		Если текКоманда.Действие = "БП_ВыполнитьЗадачу" Тогда 
			Возврат текКоманда;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ЗадачаИсполнителяНеЗавершенаНаСервере()
	
	Возврат ( Элементы.Найти( "БП_ВыполняемаяЗадача" ) <> Неопределено И
		 	  Не ЭтотОбъект["БП_ВыполняемаяЗадача"].Выполнена И
		 	  ЭтотОбъект["БП_ВыполняемаяЗадача"].ТочкаМаршрута.Порядок = 1 );
	
КонецФункции

&НаСервере
Процедура ЗапуститьБизнесПроцессСогласованияНаСервере()
	
	Обработки.СозданиеНСИ.ЗапуститьБизнесПроцессСогласования( Объект.Ссылка );
	
	БП_ПоддержкаБизнесПроцессовСервер.ОбработатьОткрытиеФормаОбъекта( ЭтотОбъект );
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиОбъектаБизнесПроцессаНаСервере()
	
	Если Обработки.СозданиеНСИ.ИспользоватьМеханизмБизнесПроцессов( Объект.Ссылка ) Тогда
		ЗапуститьБизнесПроцессСогласованияНаСервере();
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗавершитьЗадачуНаСервере( фпИмяКоманды )

	текНомер  = Сред( фпИмяКоманды, 12 );
	текСтатус = ЭтаФорма["БП_Статус" + текНомер];
	
	БП_ПоддержкаБизнесПроцессовСервер.ЗавершитьЗадачу( ЭтотОбъект.БП_ВыполняемаяЗадача, ЭтотОбъект.БП_ВыполняемаяЗадача.БизнесПроцесс, текСтатус );

	Обработки.СозданиеНСИ.УстановитьРеквизитыПоБизнесПроцессу( ЭтотОбъект.БП_ВыполняемаяЗадача, Объект.Ссылка );
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура УстановитьКомментарийЗадачиНаСервере( фпЗадача, фпКомментарий )
	
	Обработки.СозданиеНСИ.УстановитьРеквизитКомментарий( фпЗадача, фпКомментарий );
	
КонецПроцедуры

&НаКлиенте
Процедура КодТипаИсточникаВодоснабженияПриИзменении(Элемент)
	УправлениеВидимостью(ЭтаФорма);
КонецПроцедуры

#КонецОбласти
