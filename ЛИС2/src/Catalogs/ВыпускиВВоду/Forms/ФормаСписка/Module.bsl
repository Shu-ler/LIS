#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	СформироватьДеревоПодчинения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПлощадкиСписокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ПлощадкиСписок.ТекущиеДанные.Вид = "Площадка" Тогда
		ПлощадкаОтбора = ОпределитьТекущуюПлощадкуСписка();
		Если ПлощадкаОтбора = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", ПлощадкаОтбора, , , Ложь);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", ПлощадкаОтбора, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		КонецЕсли;
	ИначеЕсли Элементы.ПлощадкиСписок.ТекущиеДанные.Вид = "Организация" Тогда
		ПлощадкиОтбора = ОпределитьПодчиненныеПлощадкиСписка();
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", ПлощадкиОтбора, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПлощадкиСписок.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда	
		
		ЭлементЗаполнения = ТекущиеДанные.Наименование;
		
		Отказ = Истина;
		
		Если ТипЗнч(ЭлементЗаполнения) = Тип("СправочникСсылка.ПроизводственныеПлощадки") Тогда
			СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("ПроизводственнаяПлощадка, Организация", ЭлементЗаполнения, ПолучитьОрганизациюПлощадки(ЭлементЗаполнения)));
		ИначеЕсли ТипЗнч(ЭлементЗаполнения) = Тип("СправочникСсылка.Организации") Тогда
			СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("Организация", ЭлементЗаполнения));
		КонецЕсли;
		
		ОткрытьФорму("Справочник.ВыпускиВВоду.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Функция ОпределитьТекущуюПлощадкуСписка()
	
	ПлощадкаОтбора = Неопределено;
	
	ТекущиеДанные = Элементы.ПлощадкиСписок.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ПлощадкаОтбора = ТекущиеДанные.Наименование;
	КонецЕсли;
	
	Возврат ПлощадкаОтбора;
	
КонецФункции

&НаКлиенте
Функция ОпределитьПодчиненныеПлощадкиСписка()
	
	ТекущиеДанные = Элементы.ПлощадкиСписок.ТекущиеДанные;
	СписокПодчиненныхЭлементов = ТекущиеДанные.ПолучитьЭлементы();
	
	ПлощадкиОтбора = Новый СписокЗначений;
	ПлощадкиОтбора = ЗаполнитьПлощадкиОтбора(СписокПодчиненныхЭлементов, ПлощадкиОтбора);
			
	Возврат ПлощадкиОтбора;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьПлощадкиОтбора(СписокПодчиненныхЭлементов, ПлощадкиОтбора)
	
	Для Каждого ПодчиненныйЭлемент Из СписокПодчиненныхЭлементов Цикл
		пЭлементы = ПодчиненныйЭлемент.ПолучитьЭлементы();
		Если ПодчиненныйЭлемент.Вид = "Площадка" Тогда
			ПлощадкиОтбора.Добавить(ПодчиненныйЭлемент.Наименование);
		КонецЕсли;
		Если НЕ пЭлементы.Количество() = 0 Тогда
			ЗаполнитьПлощадкиОтбора(пЭлементы, ПлощадкиОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПлощадкиОтбора;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоПодчинения()
	
	ИсходноеДерево = Новый ДеревоЗначений;
	ИсходноеДерево.Колонки.Добавить("Наименование");
	ИсходноеДерево.Колонки.Добавить("Вид");
	ИсходноеДерево.Колонки.Добавить("Использование");
	
	//текАрхив					 = ИсходноеДерево.Строки.Добавить();
	//текАрхив.Наименование		 = "Архив";
	//текАрхив.Вид				 = "Архив";
	//текАрхив.Использование	 = Истина;
	
	ВерхнийУровень = ИсходноеДерево.Строки.Добавить();
	ВерхнийУровень.Наименование = "Все организации";
	ВерхнийУровень.Вид = "Организация";
	ВерхнийУровень.Использование = Истина;
	
	ВерхнийУровеньСтроки = ВерхнийУровень.Строки;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Родитель КАК Родитель
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ");
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Родитель) Тогда
			
			Родитель = ВерхнийУровень;
			
		Иначе
			
			Родитель = ВерхнийУровеньСтроки.Найти(Выборка.Родитель, "Наименование", Истина);
			
		КонецЕсли;	
		
		Если Родитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Родитель.Строки.Добавить();
		НоваяСтрока.Наименование = Выборка.Ссылка;
		НоваяСтрока.Вид = "Организация";
		НоваяСтрока.Использование = Истина;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроизводственныеПлощадки.Ссылка КАК Ссылка,
	|	ПроизводственныеПлощадки.Владелец КАК Владелец
	|ИЗ
	|	Справочник.ПроизводственныеПлощадки КАК ПроизводственныеПлощадки");
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Владелец) Тогда
			
			Родитель = Неопределено;
			
		Иначе
			
			Родитель = ВерхнийУровеньСтроки.Найти(Выборка.Владелец, "Наименование", Истина);
			
		КонецЕсли;	
		
		Если Родитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Родитель.Строки.Добавить();
		НоваяСтрока.Наименование = Выборка.Ссылка;
		НоваяСтрока.Вид = "Площадка";
		НоваяСтрока.Использование = Истина;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ИсходноеДерево, "ДеревоПодчинения");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОрганизациюПлощадки(Площадка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Площадка,"Владелец");
	
КонецФункции

#КонецОбласти


