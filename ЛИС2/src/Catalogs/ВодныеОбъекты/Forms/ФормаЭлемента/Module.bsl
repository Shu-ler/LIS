#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация	

	ВидОбъектаРека = Перечисления.ВидыВодногоОбъекта.Река20;
	УправлениеВидимостью(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ВХУ) И Не ЗначениеЗаполнено(Объект.БассейновыйОкруг) Тогда
		Объект.БассейновыйОкруг = ПолучитьБассейновыйОкругНаСервере(Объект.ВХУ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидВодногоОбъектаПриИзменении(Элемент)
	УправлениеВидимостью(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КлассификацияВОПриИзменении(Элемент)
	УправлениеВидимостью(ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поддержка контактной информации.

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка(ЭтотОбъект, Элемент.Имя);
	Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	Результат = УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда(ЭтотОбъект, Команда.Имя);
	Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВводаАдреса(ЭтотОбъект, Результат);
КонецПроцедуры

&НаСервере
Функция Подключаемый_ОбновитьКонтактнуюИнформацию(Результат = Неопределено)
	Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(Форма)
	
	Форма.Элементы.ГруппаХарактеристикиРеки.Видимость = ( Форма.Объект.ТипОбъектаПоДаннымГВР = ПредопределенноеЗначение( "Перечисление.ТипыВодныхОбъектовПоДаннымГВР.Река" ) );	// Форма.Объект.ВидВодногоОбъекта = Форма.ВидОбъектаРека

	Если НЕ Форма.Элементы.ГруппаХарактеристикиРеки.Видимость Тогда
		Форма.Объект.РасстояниеОтУстьяДоВпадения = 0;
		Форма.Объект.ШиринаРеки = 0;
	КонецЕсли;
	
	Если Форма.Объект.КлассификацияВО = ПредопределенноеЗначение( "Перечисление.КлассификацияВодныхОбъектов.Водоток" ) Тогда
		Форма.Элементы.ДлинаВодотока.Видимость = Истина;
		Форма.Элементы.ПлощадьВодоема.Видимость = Ложь;
	ИначеЕсли Форма.Объект.КлассификацияВО = ПредопределенноеЗначение( "Перечисление.КлассификацияВодныхОбъектов.Водоем" ) Тогда
		Форма.Элементы.ДлинаВодотока.Видимость = Ложь;
		Форма.Элементы.ПлощадьВодоема.Видимость = Истина;
	Иначе
		Форма.Элементы.ДлинаВодотока.Видимость = Ложь;
		Форма.Элементы.ПлощадьВодоема.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВХУПриИзменении(Элемент)
	
	Объект.БассейновыйОкруг = ПолучитьБассейновыйОкругНаСервере(Объект.ВХУ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБассейновыйОкругНаСервере(ВодохозяйственныйУчасток)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВодохозяйственныеУчастки.Ссылка						 КАК Ссылка,
	|	ВодохозяйственныеУчастки.ТипВоднойКлассификации		 КАК ТипВоднойКлассификации
	|ИЗ
	|	Справочник.ВодохозяйственныеУчастки КАК ВодохозяйственныеУчастки
	|ГДЕ
	|	ВодохозяйственныеУчастки.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Ссылка", ВодохозяйственныйУчасток);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	БассейновыйОкруг = ?(Выборка.ТипВоднойКлассификации = Перечисления.ТипыВоднойКлассификации.БассейновыйОкруг, Выборка.Ссылка, "");
	
	Возврат БассейновыйОкруг;
	
КонецФункции

#КонецОбласти
