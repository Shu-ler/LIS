
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДеревоПодчинения();
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.ПлощадкиСписок.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено 
		И ТекущиеДанные.Наименование <> "Все организации" Тогда	
				
		Отказ = Истина;
		СтруктураПараметров = ПолучитьСтруктуруПараметров(ТекущиеДанные.Наименование, ТекущиеДанные.ПолучитьРодителя().Наименование);		
		ОткрытьФорму("Справочник.ПриборыУчетаИспользованияВоды.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПлощадкиСписокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ПлощадкиСписок.ТекущиеДанные.Наименование = "Все организации" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Водозабор", , , , Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец", , , , Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", , , , Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", , , , Ложь);
	ИначеЕсли Элементы.ПлощадкиСписок.ТекущиеДанные.Вид = "Место применения" Тогда
		ВодозаборОтбора = ОпределитьТекущийЭлементСписка();
		Если ВодозаборОтбора = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Водозабор", , , , Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец", ВодозаборОтбора, , , Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", , , , Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", , , , Ложь);
		Иначе
			Если ТипЗнч(Элементы.ПлощадкиСписок.ТекущиеДанные.Наименование) = Тип("СправочникСсылка.Водозаборы") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Водозабор", ВодозаборОтбора, ВидСравненияКомпоновкиДанных.Равно , , Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец", , , , Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", , , , Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", , , , Ложь);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Водозабор", , , , Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец", ВодозаборОтбора, ВидСравненияКомпоновкиДанных.Равно , , Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", , , , Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", , , , Ложь);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.ПлощадкиСписок.ТекущиеДанные.Вид = "Площадка" Тогда
		ПлощадкаОтбора = ОпределитьТекущийЭлементСписка();
		Если ПлощадкаОтбора = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Водозабор", , , , Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", , , , Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", ПлощадкаОтбора, , , Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец", , , , Ложь);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Водозабор", , , , Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", , , , Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", ПлощадкаОтбора, ВидСравненияКомпоновкиДанных.Равно , , Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец", , , , Ложь);
		КонецЕсли;
	ИначеЕсли Элементы.ПлощадкиСписок.ТекущиеДанные.Вид = "Организация" Тогда
		ОрганизацияОтбора = ОпределитьТекущийЭлементСписка();
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Водозабор", , , , Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", ОрганизацияОтбора, ВидСравненияКомпоновкиДанных.ВИерархии , , Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", , , , Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец", , , , Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ОпределитьТекущийЭлементСписка()
	
	ЭлементОтбора = Неопределено;
	
	ТекущиеДанные = Элементы.ПлощадкиСписок.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ЭлементОтбора = ТекущиеДанные.Наименование;
	КонецЕсли;
	
	Возврат ЭлементОтбора;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоПодчинения()
	
	ИсходноеДерево = Новый ДеревоЗначений;
	ИсходноеДерево.Колонки.Добавить("Наименование");
	ИсходноеДерево.Колонки.Добавить("Вид");
	ИсходноеДерево.Колонки.Добавить("Использование");
	
	ВерхнийУровень = ИсходноеДерево.Строки.Добавить();
	ВерхнийУровень.Наименование = "Все организации";
	ВерхнийУровень.Вид = "Организация";
	ВерхнийУровень.Использование = Истина;
	
	ВерхнийУровеньСтроки = ВерхнийУровень.Строки;
	
	Запрос = Новый Запрос(
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	Организации.Ссылка КАК Ссылка,
	 |	Организации.Родитель КАК Родитель
	 |ИЗ
	 |	Справочник.Организации КАК Организации
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Ссылка ИЕРАРХИЯ");
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Родитель) Тогда
			
			Родитель = ВерхнийУровень;
			
		Иначе
			
			Родитель = ВерхнийУровеньСтроки.Найти(Выборка.Родитель, "Наименование", Истина);
			
		КонецЕсли;	
		
		Если Родитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Родитель.Строки.Добавить();
		НоваяСтрока.Наименование = Выборка.Ссылка;
		НоваяСтрока.Вид = "Организация";
		НоваяСтрока.Использование = Истина;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ПроизводственныеПлощадки.Ссылка КАК Ссылка,
	 |	ПроизводственныеПлощадки.Владелец КАК Владелец
	 |ИЗ
	 |	Справочник.ПроизводственныеПлощадки КАК ПроизводственныеПлощадки");
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Владелец) Тогда
			
			Родитель = Неопределено;
			
		Иначе
			
			Родитель = ВерхнийУровеньСтроки.Найти(Выборка.Владелец, "Наименование", Истина);
			
		КонецЕсли;	
		
		Если Родитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Родитель.Строки.Добавить();
		НоваяСтрока.Наименование = Выборка.Ссылка;
		НоваяСтрока.Вид = "Площадка";
		НоваяСтрока.Использование = Истина;
		
	КонецЦикла;
	
	Если Выборка.Количество() > 0 Тогда
		ИсходноеДерево = ДобавитьВДеревоВодозаборы(ИсходноеДерево);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ИсходноеДерево, "ДеревоПодчинения");
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВДеревоВодозаборы(ИсходноеДерево)
	
	ИсходноеДеревоСтроки = ИсходноеДерево.Строки;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыпускиВВоду.Ссылка						 КАК ВодозаборВыпускСкважина,
	|	ВыпускиВВоду.ПроизводственнаяПлощадка	 КАК ПроизводственнаяПлощадка,
	|	ВыпускиВВоду.Организация
	|ИЗ
	|	Справочник.ВыпускиВВоду КАК ВыпускиВВоду
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Водозаборы.Ссылка,
	|	"""",
	|	Водозаборы.Организация
	|ИЗ
	|	Справочник.Водозаборы КАК Водозаборы");
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ПроизводственнаяПлощадка) Тогда
			
			Если Не ЗначениеЗаполнено(Выборка.Организация) Тогда
				
				Родитель = Неопределено;
				
			Иначе
				
				Родитель = ИсходноеДеревоСтроки.Найти(Выборка.Организация, "Наименование", Истина);
				
			КонецЕсли;
			
		Иначе
			
			Родитель = ИсходноеДеревоСтроки.Найти(Выборка.ПроизводственнаяПлощадка, "Наименование", Истина);
			
		КонецЕсли;
		
		Если Родитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйВодозабор = Родитель.Строки.Добавить();
		НовыйВодозабор.Наименование = Выборка.ВодозаборВыпускСкважина;
		НовыйВодозабор.Вид = "Место применения";
		НовыйВодозабор.Использование = Истина;
		
	КонецЦикла;
	
	Если Выборка.Количество() > 0 Тогда
		ИсходноеДерево = ДобавитьВДеревоСкважины(ИсходноеДерево);
	КонецЕсли;
	
	Возврат ИсходноеДерево;
	
КонецФункции

&НаСервере
Функция ДобавитьВДеревоСкважины(ИсходноеДерево)
	
	ИсходноеДеревоСтроки = ИсходноеДерево.Строки;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Скважины.Ссылка		 КАК ВодозаборВыпускСкважина,
	|	Скважины.Владелец	 КАК Водозабор
	|ИЗ
	|	Справочник.Скважины	 КАК Скважины");
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Водозабор) Тогда
			
			Родитель = Неопределено;
			
		Иначе
			
			Родитель = ИсходноеДеревоСтроки.Найти(Выборка.Водозабор, "Наименование", Истина);
			
		КонецЕсли;
		
		Если Родитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйВодозабор = Родитель.Строки.Добавить();
		НовыйВодозабор.Наименование = Выборка.ВодозаборВыпускСкважина;
		НовыйВодозабор.Вид = "Место применения";
		НовыйВодозабор.Использование = Истина;
		
	КонецЦикла;
	
	Возврат ИсходноеДерево;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметров(ЭлементЗаполнения, Площадка)
	
	ЭлементОрганизация = ?(ТипЗнч(ЭлементЗаполнения) <> Тип("СправочникСсылка.ВыпускиВВоду"), ЭлементЗаполнения, Площадка);
	
	Если ТипЗнч(ЭлементЗаполнения) = Тип("СправочникСсылка.Водозаборы") Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементОрганизация ,"Организация");
	ИначеЕсли ТипЗнч(ЭлементЗаполнения) = Тип("СправочникСсылка.Скважины") Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Площадка, "Организация");
	ИначеЕсли ТипЗнч(ЭлементЗаполнения) = Тип("СправочникСсылка.Организации") Тогда
		Организация = ЭлементЗаполнения;
	Иначе
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементОрганизация ,"Владелец");
	КонецЕсли;
	
	Возврат Новый Структура("Владелец, Организация", ЭлементЗаполнения, Организация);
	
КонецФункции

#КонецОбласти
