
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	Если ЗначениеЗаполнено(Параметры.Отбор) Тогда			
		Элементы.ОрганизацииСписок.Видимость = Ложь;				
	КонецЕсли;	
	
	// (++) Зиновьев А.В., 23.10.2017, отбор по организации и вышестоящей.
	Если Параметры.Свойство("ОрганизацияДляОтбора") Тогда
		Элементы.ОрганизацииСписок.Видимость = Ложь;
		УстановитьОтборПоОрганизациям();
	КонецЕсли; 
	// (--) Зиновьев А.В., 23.10.2017 
	
	// {EXTCODE 12.01.2017 12:13:16 Кузнецов Д.В. , МВЗ
	Если Параметры.Свойство("ОтборОбъектПлатыНВОС") Тогда 
		Элементы.ОрганизацииСписок.Видимость = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец", 
		Параметры.Организация, ВидСравненияКомпоновкиДанных.Равно,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;
	// }EXTCODE 12.01.2017 12:13:19 Кузнецов Д.В. , МВЗ
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацииСписокПриАктивизацииСтроки(Элемент)
	
	ОрганизацияОтбора = ОпределитьТекущуюОрганизациюСписка();
	
	Если ОрганизацияОтбора = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", ОрганизацияОтбора, , , Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", ОрганизацияОтбора, , , Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОрганизацияОтбора = ОпределитьТекущуюОрганизациюСписка();
	
	Если ЗначениеЗаполнено(ОрганизацияОтбора) Тогда
		
		Отказ = Истина;
		
		СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("Организация, Владелец", ОрганизацияОтбора, ОрганизацияОтбора));
		
		ОткрытьФорму("Справочник.ПроизводственныеПлощадки.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ОпределитьТекущуюОрганизациюСписка()
	
	ОрганизацияОтбора = Неопределено;
	
	ТекущиеДанные = Элементы.ОрганизацииСписок.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ОрганизацияОтбора = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	Возврат ОрганизацияОтбора;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоОрганизациям()
	
	Параметры.Отбор.Очистить();
	
	Список.Отбор.Элементы.Очистить();
	
	Группа = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Группа.Использование = Истина;
	Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 
	
	лкВышестоящаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ОрганизацияДляОтбора, "Родитель");
	
	Если лкВышестоящаяОрганизация <> ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		
		ЭлОтбора = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Организация");
		ЭлОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлОтбора.Использование	= Истина;
		ЭлОтбора.ПравоеЗначение = лкВышестоящаяОрганизация;
		
	КонецЕсли; 
	
	ЭлОтбора = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Организация");
	ЭлОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлОтбора.Использование	= Истина;
	ЭлОтбора.ПравоеЗначение = Параметры.ОрганизацияДляОтбора;
	
КонецПроцедуры

#КонецОбласти

