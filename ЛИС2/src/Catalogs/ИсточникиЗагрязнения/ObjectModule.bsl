#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		
		ПроверяемыеРеквизиты.Добавить("ВидИВ");
		
		Если ВидИВ = ПредопределенноеЗначение("Справочник.ВидыИВ.СвечаМаслобака") Тогда
			// ПроверяемыеРеквизиты.Добавить("ТипГПА");
		КонецЕсли; // Если ВидИВ = ПредопределенноеЗначение("Справочник.ВидыИВ.СвечаМаслобака") Тогда	
			
		Если ВидИВ = ПредопределенноеЗначение("Справочник.ВидыИВ.ГазоперекачивающийАгрегат") Тогда	
		
		// ПроверяемыеРеквизиты.Добавить("ТипГПА");
		// ПроверяемыеРеквизиты.Добавить("КритерийТрансформацииАзота");
		КонецЕсли; // Если ВидИВ = ПредопределенноеЗначение("Справочник.ВидыИВ.СвечаМаслобака")
		
		Если ВидИВ = ПредопределенноеЗначение("Справочник.ВидыИВ.ТрубчатаяПечь") Или 
			ВидИВ = ПредопределенноеЗначение("Справочник.ВидыИВ.Котельная") Тогда
			
			// ПроверяемыеРеквизиты.Добавить("КритерийТрансформацииАзота");
			
		КонецЕсли; // Если ВидИВ = ПредопределенноеЗначение("Справочник.ВидыИВ.СвечаМаслобака")
		
		Если СтрДлина(СокрЛП(НомерИсточникаВыделения)) < 2 Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Номер ИВ"" не может быть короче 2-х символов. Введите правильное значение",,"Объект.НомерИсточникаВыделения");
		КонецЕсли;
		
	Иначе
		
		ПроверяемыеРеквизиты.Добавить("ТипИсточника");
		
		Если СтрДлина(СокрЛП(НомерИЗА)) < 4 Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Номер ИЗА"" не может быть короче 4-х символов. Введите правильное значение",,"Объект.НомерИЗА");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Родитель) Тогда
		
		ПроизводственнаяПлощадка = Родитель.ПроизводственнаяПлощадка;
		ЦехУчасток = Родитель.ЦехУчасток;
		НомерИЗА = Родитель.НомерИЗА;
		ТипИсточника = Неопределено;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИсточникиЗагрязнения.Ссылка
			|ИЗ
			|	Справочник.ИсточникиЗагрязнения КАК ИсточникиЗагрязнения
			|ГДЕ
			|	ИсточникиЗагрязнения.НомерИЗА = &НомерИЗА
			|	И НЕ ИсточникиЗагрязнения.Родитель = ЗНАЧЕНИЕ(Справочник.ИсточникиЗагрязнения.ПустаяСсылка)
			|	И ИсточникиЗагрязнения.ПроизводственнаяПлощадка = &ПроизводственнаяПлощадка
			|	И ИсточникиЗагрязнения.НомерИсточникаВыделения = &НомерИВ
			|	И ИсточникиЗагрязнения.Ссылка <> &ОбъектСсылка
			|	И ИсточникиЗагрязнения.НомерИсточникаВыделения <> """"
			|	И НЕ ИсточникиЗагрязнения.ПометкаУдаления");
		Запрос.УстановитьПараметр("ПроизводственнаяПлощадка", ПроизводственнаяПлощадка);
		Запрос.УстановитьПараметр("НомерИЗА", НомерИЗА);
		Запрос.УстановитьПараметр("НомерИВ", НомерИсточникаВыделения);
		Запрос.УстановитьПараметр("ОбъектСсылка", Ссылка);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Источник выделения с указанными номерами ИЗА и ИВ уже существует. Для записи объекта измените значение номера.");
			Отказ = Истина;
		КонецЕсли;

	Иначе
		
		МетанПоУчетуДУ = Ложь;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИсточникиЗагрязнения.Ссылка
			|ИЗ
			|	Справочник.ИсточникиЗагрязнения КАК ИсточникиЗагрязнения
			|ГДЕ
			|	ИсточникиЗагрязнения.НомерИЗА = &НомерИЗА
			|	И ИсточникиЗагрязнения.Родитель = ЗНАЧЕНИЕ(Справочник.ИсточникиЗагрязнения.ПустаяСсылка)
			|	И ИсточникиЗагрязнения.ПроизводственнаяПлощадка = &ПроизводственнаяПлощадка
			|	И ИсточникиЗагрязнения.Ссылка <> &ОбъектСсылка
			|	И НЕ ИсточникиЗагрязнения.ПометкаУдаления");
		Запрос.УстановитьПараметр("ПроизводственнаяПлощадка", ПроизводственнаяПлощадка);
		Запрос.УстановитьПараметр("НомерИЗА", НомерИЗА);
		Запрос.УстановитьПараметр("ОбъектСсылка", Ссылка);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Источник загрязнения с указанным номером ИЗА уже существует. Для записи объекта измените значение номера.");
			Отказ = Истина;
		КонецЕсли;
		
		НомерИсточникаВыделения = Неопределено;
		КоличествоИВ = Неопределено;
		
	КонецЕсли;
	
	Если НЕ ТипИсточника = Перечисления.ТипыИсточниковВыбросов.Организованный Тогда
		Диаметр = 0;
		ВидТрубы = Неопределено;
		ДлинаТруба = 0;
		ШиринаТруба = 0;
		ВысотаИсточника = 0;
		НаличиеВентилятора = 0;
		МаркаВентилятора = "";
		ПроизводительностьВентилятора = 0;
	ИначеЕсли НЕ ВидТрубы = Перечисления.ВидыТрубыИЗА.Круглая Тогда
		Диаметр = 0;
	ИначеЕсли НЕ ВидТрубы = Перечисления.ВидыТрубыИЗА.Прямоугольная Тогда
		ДлинаТруба = 0;
		ШиринаТруба = 0;
	КонецЕсли;
	
	Если НЕ ТипИсточника = Перечисления.ТипыИсточниковВыбросов.Неорганизованный Тогда
		ДлинаУчастка = 0;
		ШиринаУчастка = 0;
		ВысотаУчастка = 0;
	КонецЕсли;
		
	Если НЕ ЭтоНовый() И ВидИВ <> Ссылка.ВидИВ И ЗначениеЗаполнено(Родитель) Тогда 
		ДополнительныеСвойства.Вставить("УдалитьСвязанныеЗаписи", Истина);
	Иначе	
		ДополнительныеСвойства.Вставить("УдалитьСвязанныеЗаписи", Ложь);
	КонецЕсли; // Если ВидИВ <> Ссылка.ВидИВ Тогда	
	
	Если НЕ ЗначениеЗаполнено(Родитель) Тогда
		Возврат;
	КонецЕсли;
	
	ВидСсылкиИВ = "из" + ВидИВ.ИмяПредопределенныхДанных;	
	Если Метаданные.НайтиПоПолномуИмени("Справочник." + ВидСсылкиИВ) = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаОЗ) Тогда
		СсылкаОЗ = Справочники[ВидСсылкиИВ].ПолучитьСсылку(Новый УникальныйИдентификатор);
		ДополнительныеСвойства.Вставить("СозданиеСвязанногоИЗА", Истина);
	ИначеЕсли ЭтоНовый() Тогда
		ДополнительныеСвойства.Вставить("СсылкаОЗ", СсылкаОЗ);
		СсылкаОЗ = Справочники[ВидСсылкиИВ].ПолучитьСсылку(Новый УникальныйИдентификатор);
		ДополнительныеСвойства.Вставить("КопированиеСвязанногоИЗА", Истина);
	КонецЕсли;
	
КонецПроцедуры // Процедура ПередЗаписью(Отказ)

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("СозданиеСвязанногоИЗА") ИЛИ ДополнительныеСвойства.Свойство("КопированиеСвязанногоИЗА") Тогда
		ВидСсылкиИВ = "из" + ВидИВ.ИмяПредопределенныхДанных;	
		Если ДополнительныеСвойства.Свойство("СозданиеСвязанногоИЗА") Тогда
			НовыйОбъект = Справочники[ВидСсылкиИВ].СоздатьЭлемент();	
		Иначе
			НовыйОбъект = ДополнительныеСвойства.СсылкаОЗ.ПолучитьОбъект().Скопировать();
		КонецЕсли;
		НовыйОбъект.УстановитьСсылкуНового(СсылкаОЗ);
		НовыйОбъект.Владелец = Ссылка;
		НовыйОбъект.Наименование = Наименование;
		НовыйОбъект.Записать();
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаОЗ) Тогда
		ПометкаУдаленияОЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаОЗ, "ПометкаУдаления");
		Если НЕ ПометкаУдаления = ПометкаУдаленияОЗ Тогда
			СвязанныйОбъект = СсылкаОЗ.ПолучитьОбъект();
			СвязанныйОбъект.ПометкаУдаления = ПометкаУдаления;
			СвязанныйОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьРеквизитыИЗАПодчиненныхИсточниковВыделения( Отказ );
	
	УдалитьЗаписиСвязанныхРегистров();
	
	// Работа с бизнес-процессами
	Если Обработки.СозданиеНСИ.ИспользоватьМеханизмБизнесПроцессов( Ссылка ) Тогда 
		ЗапуститьБизнесПроцессСогласования();
	КонецЕсли;
	
КонецПроцедуры // Процедура ПриЗаписи(Отказ)

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьЗаписиСвязанныхРегистров()
	
	Если ДополнительныеСвойства.УдалитьСвязанныеЗаписи Тогда  	
		
		Если ВидИВ <> ПредопределенноеЗначение("Справочник.ВидыИВ.ТрубчатаяПечь") Тогда 
			
			МассивИменРегистров = Справочники.ИсточникиЗагрязнения.ПолучитьИменаСвязанныхРегистраПоВидуИВ(ПредопределенноеЗначение("Справочник.ВидыИВ.ТрубчатаяПечь"));

			УдалитьЗаписиСвязанныхРегистровПоМассивуИмен(МассивИменРегистров, Ссылка);
							
		КонецЕсли; // Если ВидИВ <> ПредопределенноеЗначение("Справочник.ВидыИВ.СвечаМаслобака") Тогда 
		
		Если ВидИВ <> ПредопределенноеЗначение("Справочник.ВидыИВ.Котельная") Тогда 
			
			МассивИменРегистров = Справочники.ИсточникиЗагрязнения.ПолучитьИменаСвязанныхРегистраПоВидуИВ(ПредопределенноеЗначение("Справочник.ВидыИВ.Котельная"));

			УдалитьЗаписиСвязанныхРегистровПоМассивуИмен(МассивИменРегистров, Ссылка);
			
		КонецЕсли; // Если ВидИВ <> ПредопределенноеЗначение("Справочник.ВидыИВ.Котельная") Тогда 
		
		// !!! Наполнить функцию по остальным видам ИВ
		
	КонецЕсли; // Если ДополнительныеСвойства.УдалитьСвязанныеЗаписи Тогда 
	
КонецПроцедуры // Процедура УдалитьЗаписиСвязанныхРегистров()

Процедура УдалитьЗаписиСвязанныхРегистровПоМассивуИмен(МассивИменРС, ИсточникЗагрязнения)
	
	Для Каждого ИмяРС Из МассивИменРС Цикл 
		
		НаборЗаписей = РегистрыСведений[ИмяРС].СоздатьНаборЗаписей();
		
		//++Орлов(Начало 17.08.2017
		// Добавлена проверка наличия отбора, т.к. не у всех регистров измерение ИсточникЗагрязнения
		Если НаборЗаписей.Отбор.Найти("ИсточникЗагрязнения") <> Неопределено Тогда
			НаборЗаписей.Отбор.ИсточникЗагрязнения.Установить(ИсточникЗагрязнения);		
		ИначеЕсли НаборЗаписей.Отбор.Найти("ИсточникВыделения") <> Неопределено Тогда
			НаборЗаписей.Отбор.ИсточникВыделения.Установить(ИсточникЗагрязнения);
		Иначе 
			Возврат;
		КонецЕсли;	
		
		//НаборЗаписей.Отбор.ИсточникЗагрязнения.Установить(ИсточникЗагрязнения);
		//--Орлов
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда 
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
		КонецЕсли; // Если НаборЗаписей.Количество() > 0 Тогда	
		
	КонецЦикла; // Для Каждого ИмяРС Из МассивИменРС Цикл 
	
КонецПроцедуры // Процедура УдалитьЗаписиСвязанныхРегистровПоМассивуИмен(МассивИменРС)

Процедура ОбновитьРеквизитыИЗАПодчиненныхИсточниковВыделения( фпОтказ )

	масПодчиненныеЭлементы = Справочники.ИсточникиЗагрязнения.НайтиПодчиненныеЭлементы( Ссылка );
	Для Каждого текИсточникВыделения Из масПодчиненныеЭлементы Цикл 
		текИсточникВыделенияОбъект = текИсточникВыделения.ПолучитьОбъект();
		Если текИсточникВыделения.ПроизводственнаяПлощадка <> ПроизводственнаяПлощадка Тогда 
			текИсточникВыделенияОбъект.ПроизводственнаяПлощадка = ПроизводственнаяПлощадка;
		КонецЕсли;
		Если текИсточникВыделения.НомерИЗА <> НомерИЗА Тогда 
			текИсточникВыделенияОбъект.НомерИЗА = НомерИЗА;
		КонецЕсли;
		
		Если текИсточникВыделенияОбъект.Модифицированность() Тогда 
			Попытка
				текИсточникВыделенияОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ОписаниеОшибки() );
				фпОтказ = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры	

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ПередУдалением( Отказ )

// 1СКСУ - Казанцев И.В. 19.01.17 11:15
// При провере АПК не обнаружена конструкция "Если ОбменДанными.Загрузка Тогда ...".
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли; 
// 1СКСУ - Казанцев И.В. 19.01.17 11:15 Конец

	
	// Работа с бизнес-процессами
	Если Обработки.СозданиеНСИ.ИспользоватьМеханизмБизнесПроцессов( Ссылка ) Тогда
		Если Не Обработки.СозданиеНСИ.ЭлементДоступенДляРедактирования( Ссылка ) Тогда 
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Работа с бизнес-процессами
#Область ФункцииБизнесПроцессов

Процедура ЗапуститьБизнесПроцессСогласования()
	
	Обработки.СозданиеНСИ.ЗапуститьБизнесПроцессСогласования( Ссылка );
	
	стркОтбор = Новый Структура( "Выполнена, ПометкаУдаления", Ложь, Ложь );
	масЗадачи = БП_ПоддержкаБизнесПроцессовСервер.НайтиБизнесПроцессыИЗадачи( Ссылка, , стркОтбор, Истина );

	УстановитьРеквизитыПоБизнесПроцессуНаСервере( ?( масЗадачи.Количество() > 0, масЗадачи[0].Задача, Неопределено ) );

КонецПроцедуры

Процедура УстановитьРеквизитыПоБизнесПроцессуНаСервере( фпЗадача ) Экспорт 

	Если фпЗадача <> Неопределено Тогда 
		Обработки.СозданиеНСИ.УстановитьРеквизитОрганизация( фпЗадача.БизнесПроцесс, ПроизводственнаяПлощадка.Владелец );
		
		Обработки.СозданиеНСИ.УстановитьСрокВыполненияПоследнейЗадачиБизнесПроцесса( фпЗадача.БизнесПроцесс );
									
		Обработки.СозданиеНСИ.УстановитьРеквизитПользователь( фпЗадача, ПараметрыСеанса.ТекущийПользователь );

		Обработки.СозданиеНСИ.УстановитьРеквизитПредставлениеОбъекта( фпЗадача.БизнесПроцесс, Ссылка );
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРеквизитПредставлениеОбъекта( фпБизнесПроцесс ) Экспорт

	текРеквизитПредставлениеОбъекта = Справочники.БП_Реквизиты.НайтиПоНаименованию( "ПредставлениеОбъекта" );
	
	текСтатусОбъекта = РегистрыСведений.БП_СтатусыОбъектов.ПолучитьСтатусОбъекта( фпБизнесПроцесс );
	
	стрПредставление = "" + ?( ПустаяСтрока( текСтатусОбъекта ), "Создан / изменен", текСтатусОбъекта ) + 
					   " элемент, номер ИЗА: " + НомерИЗА + 
					   ?( ЗначениеЗаполнено( Родитель ), ", номер ИВ: " + НомерИсточникаВыделения + ", '" + Наименование + "'",
						   											", '" + Наименование + "'" ) +
					   " / " + ПроизводственнаяПлощадка.Организация + " / " + ПроизводственнаяПлощадка;

	РегистрыСведений.БП_РеквизитыОбъектов.УстановитьРеквизит( фпБизнесПроцесс, текРеквизитПредставлениеОбъекта, стрПредставление );

КонецПроцедуры

#КонецОбласти

