#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// реализуем возможность открывать форму списка в режиме выбора
	// для этого нужно открыть форму списка с параметрами (РежимВыбора = Истина)
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	
	СформироватьДеревоПодчинения();
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПлощадкиСписокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ПлощадкиСписок.ТекущиеДанные.Вид = "Цех" Тогда
		ЦехОтбора = ОпределитьТекущийЭлементСписка();
		Если ЦехОтбора = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЦехУчасток", ЦехОтбора, , , Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", , , , Ложь);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЦехУчасток", ЦехОтбора, , , Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", , , , Ложь);
		КонецЕсли;
	ИначеЕсли Элементы.ПлощадкиСписок.ТекущиеДанные.Вид = "Площадка" Тогда
		ПлощадкаОтбора = ОпределитьТекущийЭлементСписка();
		Если ПлощадкаОтбора = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", ПлощадкаОтбора, , , Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЦехУчасток", , , , Ложь);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", ПлощадкаОтбора,ВидСравненияКомпоновкиДанных.Равно , , Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЦехУчасток", , , , Ложь);
		КонецЕсли;
	ИначеЕсли Элементы.ПлощадкиСписок.ТекущиеДанные.Вид = "Организация" Тогда
		ПлощадкиОтбора = ОпределитьПодчиненныеПлощадкиСписка();
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПроизводственнаяПлощадка", ПлощадкиОтбора, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЦехУчасток", , , , Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПлощадкиСписок.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда	
		
		ЭлементЗаполнения = ТекущиеДанные.Наименование;
		
		Если ТипЗнч(ЭлементЗаполнения) = Тип("Строка") ИЛИ ТипЗнч(ЭлементЗаполнения) = Тип("СправочникСсылка.Организации") Тогда
			Возврат;
		КонецЕсли;

		Отказ = Истина;
		
		Если ТипЗнч(ЭлементЗаполнения) = Тип("СправочникСсылка.ЦехаУчастки") Тогда
			СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("ЦехУчасток, ПроизводственнаяПлощадка, Родитель", ЭлементЗаполнения, ПолучитьПлощадкуЦеха(ЭлементЗаполнения), Родитель));
		ИначеЕсли ТипЗнч(ЭлементЗаполнения) = Тип("СправочникСсылка.ПроизводственныеПлощадки") Тогда
			СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("ПроизводственнаяПлощадка, Родитель", ЭлементЗаполнения, Родитель));
		КонецЕсли;
		
		ОткрытьФорму("Справочник.ИсточникиЗагрязнения.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ОпределитьТекущийЭлементСписка()
	
	ЭлементОтбора = Неопределено;
	
	ТекущиеДанные = Элементы.ПлощадкиСписок.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ЭлементОтбора = ТекущиеДанные.Наименование;
	КонецЕсли;
	
	Возврат ЭлементОтбора;
	
КонецФункции

&НаКлиенте
Функция ОпределитьПодчиненныеПлощадкиСписка()
	
	ТекущиеДанные = Элементы.ПлощадкиСписок.ТекущиеДанные;
	СписокПодчиненныхЭлементов = ТекущиеДанные.ПолучитьЭлементы();
	
	ПлощадкиОтбора = Новый СписокЗначений;
	ПлощадкиОтбора = ЗаполнитьПлощадкиОтбора(СписокПодчиненныхЭлементов, ПлощадкиОтбора);
			
	Возврат ПлощадкиОтбора;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьПлощадкиОтбора(СписокПодчиненныхЭлементов, ПлощадкиОтбора)
	
	Для Каждого ПодчиненныйЭлемент Из СписокПодчиненныхЭлементов Цикл
		пЭлементы = ПодчиненныйЭлемент.ПолучитьЭлементы();
		Если ПодчиненныйЭлемент.Вид = "Площадка" Тогда
			ПлощадкиОтбора.Добавить(ПодчиненныйЭлемент.Наименование);
		КонецЕсли;
		Если НЕ пЭлементы.Количество() = 0 Тогда
			ЗаполнитьПлощадкиОтбора(пЭлементы, ПлощадкиОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПлощадкиОтбора;
	
КонецФункции

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элемент.ТекущиеДанные.СсылкаОЗ) Тогда		
		Отказ = Истина;
		ПоказатьЗначение(,Элемент.ТекущиеДанные.СсылкаОЗ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидТолькоИЗА(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Родитель",,ВидСравненияКомпоновкиДанных.НеЗаполнено , , Истина);
	Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидТолькоИВ(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Родитель",,ВидСравненияКомпоновкиДанных.Заполнено , , Истина);
	Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИерархия(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Родитель",,, , Ложь);
	Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоПодчинения()
	
	ИсходноеДерево = Новый ДеревоЗначений;
	ИсходноеДерево.Колонки.Добавить("Наименование");
	ИсходноеДерево.Колонки.Добавить("Вид");
	ИсходноеДерево.Колонки.Добавить("Использование");
	
	ВерхнийУровень = ИсходноеДерево.Строки.Добавить();
	ВерхнийУровень.Наименование = "Все организации";
	ВерхнийУровень.Вид = "Организация";
	ВерхнийУровень.Использование = Истина;
	
	ВерхнийУровеньСтроки = ВерхнийУровень.Строки;
	
	Запрос = Новый Запрос(
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	Организации.Ссылка КАК Ссылка,
	 |	Организации.Родитель КАК Родитель
	 |ИЗ
	 |	Справочник.Организации КАК Организации
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Ссылка ИЕРАРХИЯ");
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Родитель) Тогда
			
			Родитель = ВерхнийУровень;
			
		Иначе
			
			Родитель = ВерхнийУровеньСтроки.Найти(Выборка.Родитель, "Наименование", Истина);
			
		КонецЕсли;	
		
		Если Родитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Родитель.Строки.Добавить();
		НоваяСтрока.Наименование = Выборка.Ссылка;
		НоваяСтрока.Вид = "Организация";
		НоваяСтрока.Использование = Истина;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ПроизводственныеПлощадки.Ссылка КАК Ссылка,
	 |	ПроизводственныеПлощадки.Владелец КАК Владелец
	 |ИЗ
	 |	Справочник.ПроизводственныеПлощадки КАК ПроизводственныеПлощадки");
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Владелец) Тогда
			
			Родитель = Неопределено;
			
		Иначе
			
			Родитель = ВерхнийУровеньСтроки.Найти(Выборка.Владелец, "Наименование", Истина);
			
		КонецЕсли;	
		
		Если Родитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Родитель.Строки.Добавить();
		НоваяСтрока.Наименование = Выборка.Ссылка;
		НоваяСтрока.Вид = "Площадка";
		НоваяСтрока.Использование = Истина;
		
	КонецЦикла;
	
	Если Выборка.Количество() > 0 Тогда
		ИсходноеДерево = ДобавитьВДеревоЦеха(ИсходноеДерево);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ИсходноеДерево, "ДеревоПодчинения");
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВДеревоЦеха(ИсходноеДерево)
	
	ИсходноеДеревоСтроки = ИсходноеДерево.Строки;
	Запрос = Новый Запрос(
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ЦехаУчастки.Ссылка КАК Ссылка,
	 |	ЦехаУчастки.Родитель,
	 |	ЦехаУчастки.Владелец
	 |ИЗ
	 |	Справочник.ЦехаУчастки КАК ЦехаУчастки
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Ссылка ИЕРАРХИЯ");
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Родитель) Тогда
			
			РодительЦеха = ИсходноеДеревоСтроки.Найти(Выборка.Владелец, "Наименование", Истина);
			
		Иначе
			
			РодительЦеха = ИсходноеДеревоСтроки.Найти(Выборка.Родитель, "Наименование", Истина);
			
		КонецЕсли;	
		
		Если РодительЦеха = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЦех = РодительЦеха.Строки.Добавить();
		НовыйЦех.Наименование = Выборка.Ссылка;
		НовыйЦех.Вид = "Цех";
		НовыйЦех.Использование = Истина;
		
	КонецЦикла;
	
	Возврат ИсходноеДерево;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПлощадкуЦеха(Цех)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Цех,"Владелец");
	   
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения( ИмяСобытия, Параметр, Источник )
	
	Если ИмяСобытия = "ОбновитьСписок" Тогда 
		Элементы.Список.Обновить();
		Элементы.Список.ТекущаяСтрока = Параметр;
	ИначеЕсли ИмяСобытия = "ОбновитьДанныеПроизводственныхПлощадок" Тогда 
		СформироватьДеревоПодчинения();
		Элементы.ПлощадкиСписок.ТекущаяСтрока = ПолучитьИдентификаторСтрокиНаСервере( Параметр );
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторСтрокиНаСервере( фпЗначение )

	Возврат НайтиСтрокуВСпискеПлощадок( ДеревоПодчинения.ПолучитьЭлементы(), фпЗначение );
	
КонецФункции

&НаСервере
Функция НайтиСтрокуВСпискеПлощадок( фпДанныеФормыКоллекцияЭлементовДерева, фпЗначение )

	Для Каждого текСтрока Из фпДанныеФормыКоллекцияЭлементовДерева Цикл 
		Если текСтрока.Наименование = фпЗначение Тогда 
			Возврат текСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		текНайденнаяСтрока = НайтиСтрокуВСпискеПлощадок( текСтрока.ПолучитьЭлементы(), фпЗначение );
		Если текНайденнаяСтрока <> Неопределено Тогда 
			Возврат текНайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;		
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
	
		ПометкаУдаленияИЗА = ТекущиеДанные.ПометкаУдаления;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНаличиеИВУИЗА(Ссылка)
	
	ПризнакНаличия = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсточникиЗагрязнения.Ссылка			 КАК Ссылка
		|ИЗ
		|	Справочник.ИсточникиЗагрязнения КАК ИсточникиЗагрязнения
		|ГДЕ
		|	ИсточникиЗагрязнения.Родитель = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() <> 0 Тогда
	
		ПризнакНаличия = Истина;
	
	КонецЕсли;
	
	Возврат ПризнакНаличия;
	
КонецФункции // Функция ПроверитьНаличиеИВУИЗА(Ссылка)

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.Родитель) И НЕ ПроверитьНаличиеИВУИЗА(ТекущиеДанные.Ссылка) Тогда
		
		Если ПометкаУдаленияИЗА И НЕ ПометкаУдаленияИЗА = ТекущиеДанные.ПометкаУдаления Тогда
			
			ОповещениеПоПометкеНаУдаление = Новый ОписаниеОповещения("ПослеИзмененияПометкиУдаления", ЭтотОбъект, ТекущиеДанные);
			ПоказатьВопрос(ОповещениеПоПометкеНаУдаление, "У данного ""Источника загрязнения"" нет ""Источников выделения"". Для снятия пометки удаления необходимо создать ""Источник выделения"". Создать сейчас?", РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияПометкиУдаления(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СтруктураПараметров = Новый Структура("Родитель", ДополнительныеПараметры.Ссылка);
		ОткрытьФорму("Справочник.ИсточникиЗагрязнения.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
		
	Иначе
		
		ОбновитьПометкуУдаленияУИЗА(Истина, ДополнительныеПараметры.Ссылка);
		ОповеститьОбИзменении(ДополнительныеПараметры.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПометкуУдаленияУИЗА (Пометка, ДополнительныеПараметры)
	
	ИЗА = ДополнительныеПараметры.ПолучитьОбъект();
	ИЗА.ПометкаУдаления = Пометка;
	ИЗА.Записать();
	
КонецПроцедуры

#КонецОбласти
